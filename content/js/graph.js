/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 628.0, "minX": 0.0, "maxY": 59122.0, "series": [{"data": [[0.0, 628.0], [0.1, 630.0], [0.2, 630.0], [0.3, 631.0], [0.4, 631.0], [0.5, 631.0], [0.6, 632.0], [0.7, 632.0], [0.8, 632.0], [0.9, 632.0], [1.0, 633.0], [1.1, 633.0], [1.2, 633.0], [1.3, 633.0], [1.4, 633.0], [1.5, 633.0], [1.6, 633.0], [1.7, 633.0], [1.8, 634.0], [1.9, 634.0], [2.0, 634.0], [2.1, 634.0], [2.2, 634.0], [2.3, 634.0], [2.4, 634.0], [2.5, 634.0], [2.6, 634.0], [2.7, 634.0], [2.8, 634.0], [2.9, 634.0], [3.0, 634.0], [3.1, 634.0], [3.2, 634.0], [3.3, 634.0], [3.4, 634.0], [3.5, 634.0], [3.6, 634.0], [3.7, 634.0], [3.8, 635.0], [3.9, 635.0], [4.0, 635.0], [4.1, 635.0], [4.2, 635.0], [4.3, 635.0], [4.4, 635.0], [4.5, 635.0], [4.6, 635.0], [4.7, 635.0], [4.8, 635.0], [4.9, 635.0], [5.0, 635.0], [5.1, 635.0], [5.2, 635.0], [5.3, 635.0], [5.4, 635.0], [5.5, 635.0], [5.6, 635.0], [5.7, 635.0], [5.8, 635.0], [5.9, 635.0], [6.0, 636.0], [6.1, 636.0], [6.2, 636.0], [6.3, 636.0], [6.4, 636.0], [6.5, 636.0], [6.6, 636.0], [6.7, 636.0], [6.8, 636.0], [6.9, 636.0], [7.0, 636.0], [7.1, 636.0], [7.2, 636.0], [7.3, 636.0], [7.4, 636.0], [7.5, 636.0], [7.6, 636.0], [7.7, 636.0], [7.8, 636.0], [7.9, 636.0], [8.0, 636.0], [8.1, 636.0], [8.2, 636.0], [8.3, 636.0], [8.4, 636.0], [8.5, 636.0], [8.6, 636.0], [8.7, 637.0], [8.8, 637.0], [8.9, 637.0], [9.0, 637.0], [9.1, 637.0], [9.2, 637.0], [9.3, 637.0], [9.4, 637.0], [9.5, 637.0], [9.6, 637.0], [9.7, 637.0], [9.8, 637.0], [9.9, 637.0], [10.0, 637.0], [10.1, 637.0], [10.2, 637.0], [10.3, 637.0], [10.4, 637.0], [10.5, 637.0], [10.6, 637.0], [10.7, 637.0], [10.8, 637.0], [10.9, 637.0], [11.0, 637.0], [11.1, 637.0], [11.2, 637.0], [11.3, 637.0], [11.4, 637.0], [11.5, 637.0], [11.6, 637.0], [11.7, 637.0], [11.8, 637.0], [11.9, 637.0], [12.0, 637.0], [12.1, 637.0], [12.2, 638.0], [12.3, 638.0], [12.4, 638.0], [12.5, 638.0], [12.6, 638.0], [12.7, 638.0], [12.8, 638.0], [12.9, 638.0], [13.0, 638.0], [13.1, 638.0], [13.2, 638.0], [13.3, 638.0], [13.4, 638.0], [13.5, 638.0], [13.6, 638.0], [13.7, 638.0], [13.8, 638.0], [13.9, 638.0], [14.0, 638.0], [14.1, 638.0], [14.2, 638.0], [14.3, 638.0], [14.4, 638.0], [14.5, 638.0], [14.6, 638.0], [14.7, 638.0], [14.8, 638.0], [14.9, 638.0], [15.0, 638.0], [15.1, 638.0], [15.2, 638.0], [15.3, 638.0], [15.4, 638.0], [15.5, 638.0], [15.6, 638.0], [15.7, 638.0], [15.8, 638.0], [15.9, 638.0], [16.0, 638.0], [16.1, 638.0], [16.2, 638.0], [16.3, 638.0], [16.4, 638.0], [16.5, 638.0], [16.6, 638.0], [16.7, 638.0], [16.8, 638.0], [16.9, 638.0], [17.0, 638.0], [17.1, 638.0], [17.2, 638.0], [17.3, 638.0], [17.4, 639.0], [17.5, 639.0], [17.6, 639.0], [17.7, 639.0], [17.8, 639.0], [17.9, 639.0], [18.0, 639.0], [18.1, 639.0], [18.2, 639.0], [18.3, 639.0], [18.4, 639.0], [18.5, 639.0], [18.6, 639.0], [18.7, 639.0], [18.8, 639.0], [18.9, 639.0], [19.0, 639.0], [19.1, 639.0], [19.2, 639.0], [19.3, 639.0], [19.4, 639.0], [19.5, 639.0], [19.6, 639.0], [19.7, 639.0], [19.8, 639.0], [19.9, 639.0], [20.0, 639.0], [20.1, 639.0], [20.2, 639.0], [20.3, 639.0], [20.4, 639.0], [20.5, 639.0], [20.6, 639.0], [20.7, 639.0], [20.8, 639.0], [20.9, 639.0], [21.0, 639.0], [21.1, 639.0], [21.2, 639.0], [21.3, 639.0], [21.4, 639.0], [21.5, 639.0], [21.6, 639.0], [21.7, 639.0], [21.8, 639.0], [21.9, 639.0], [22.0, 639.0], [22.1, 639.0], [22.2, 639.0], [22.3, 639.0], [22.4, 639.0], [22.5, 640.0], [22.6, 640.0], [22.7, 640.0], [22.8, 640.0], [22.9, 640.0], [23.0, 640.0], [23.1, 640.0], [23.2, 640.0], [23.3, 640.0], [23.4, 640.0], [23.5, 640.0], [23.6, 640.0], [23.7, 640.0], [23.8, 640.0], [23.9, 640.0], [24.0, 640.0], [24.1, 640.0], [24.2, 640.0], [24.3, 640.0], [24.4, 640.0], [24.5, 640.0], [24.6, 640.0], [24.7, 640.0], [24.8, 640.0], [24.9, 640.0], [25.0, 640.0], [25.1, 640.0], [25.2, 640.0], [25.3, 640.0], [25.4, 640.0], [25.5, 640.0], [25.6, 640.0], [25.7, 640.0], [25.8, 640.0], [25.9, 640.0], [26.0, 640.0], [26.1, 640.0], [26.2, 640.0], [26.3, 640.0], [26.4, 640.0], [26.5, 640.0], [26.6, 640.0], [26.7, 640.0], [26.8, 640.0], [26.9, 640.0], [27.0, 640.0], [27.1, 640.0], [27.2, 640.0], [27.3, 640.0], [27.4, 640.0], [27.5, 640.0], [27.6, 640.0], [27.7, 640.0], [27.8, 640.0], [27.9, 640.0], [28.0, 640.0], [28.1, 640.0], [28.2, 641.0], [28.3, 641.0], [28.4, 641.0], [28.5, 641.0], [28.6, 641.0], [28.7, 641.0], [28.8, 641.0], [28.9, 641.0], [29.0, 641.0], [29.1, 641.0], [29.2, 641.0], [29.3, 641.0], [29.4, 641.0], [29.5, 641.0], [29.6, 641.0], [29.7, 641.0], [29.8, 641.0], [29.9, 641.0], [30.0, 641.0], [30.1, 641.0], [30.2, 641.0], [30.3, 641.0], [30.4, 641.0], [30.5, 641.0], [30.6, 641.0], [30.7, 641.0], [30.8, 641.0], [30.9, 641.0], [31.0, 641.0], [31.1, 641.0], [31.2, 641.0], [31.3, 641.0], [31.4, 641.0], [31.5, 641.0], [31.6, 641.0], [31.7, 641.0], [31.8, 641.0], [31.9, 641.0], [32.0, 641.0], [32.1, 641.0], [32.2, 641.0], [32.3, 641.0], [32.4, 641.0], [32.5, 641.0], [32.6, 641.0], [32.7, 641.0], [32.8, 641.0], [32.9, 641.0], [33.0, 641.0], [33.1, 641.0], [33.2, 641.0], [33.3, 641.0], [33.4, 642.0], [33.5, 642.0], [33.6, 642.0], [33.7, 642.0], [33.8, 642.0], [33.9, 642.0], [34.0, 642.0], [34.1, 642.0], [34.2, 642.0], [34.3, 642.0], [34.4, 642.0], [34.5, 642.0], [34.6, 642.0], [34.7, 642.0], [34.8, 642.0], [34.9, 642.0], [35.0, 642.0], [35.1, 642.0], [35.2, 642.0], [35.3, 642.0], [35.4, 642.0], [35.5, 642.0], [35.6, 642.0], [35.7, 642.0], [35.8, 642.0], [35.9, 642.0], [36.0, 642.0], [36.1, 642.0], [36.2, 642.0], [36.3, 642.0], [36.4, 642.0], [36.5, 642.0], [36.6, 642.0], [36.7, 642.0], [36.8, 642.0], [36.9, 642.0], [37.0, 642.0], [37.1, 642.0], [37.2, 642.0], [37.3, 642.0], [37.4, 642.0], [37.5, 642.0], [37.6, 642.0], [37.7, 642.0], [37.8, 642.0], [37.9, 642.0], [38.0, 642.0], [38.1, 642.0], [38.2, 642.0], [38.3, 642.0], [38.4, 642.0], [38.5, 642.0], [38.6, 642.0], [38.7, 642.0], [38.8, 642.0], [38.9, 642.0], [39.0, 642.0], [39.1, 642.0], [39.2, 642.0], [39.3, 642.0], [39.4, 642.0], [39.5, 643.0], [39.6, 643.0], [39.7, 643.0], [39.8, 643.0], [39.9, 643.0], [40.0, 643.0], [40.1, 643.0], [40.2, 643.0], [40.3, 643.0], [40.4, 643.0], [40.5, 643.0], [40.6, 643.0], [40.7, 643.0], [40.8, 643.0], [40.9, 643.0], [41.0, 643.0], [41.1, 643.0], [41.2, 643.0], [41.3, 643.0], [41.4, 643.0], [41.5, 643.0], [41.6, 643.0], [41.7, 643.0], [41.8, 643.0], [41.9, 643.0], [42.0, 643.0], [42.1, 643.0], [42.2, 643.0], [42.3, 643.0], [42.4, 643.0], [42.5, 643.0], [42.6, 643.0], [42.7, 643.0], [42.8, 643.0], [42.9, 643.0], [43.0, 643.0], [43.1, 643.0], [43.2, 643.0], [43.3, 643.0], [43.4, 643.0], [43.5, 643.0], [43.6, 643.0], [43.7, 643.0], [43.8, 643.0], [43.9, 643.0], [44.0, 643.0], [44.1, 644.0], [44.2, 644.0], [44.3, 644.0], [44.4, 644.0], [44.5, 644.0], [44.6, 644.0], [44.7, 644.0], [44.8, 644.0], [44.9, 644.0], [45.0, 644.0], [45.1, 644.0], [45.2, 644.0], [45.3, 644.0], [45.4, 644.0], [45.5, 644.0], [45.6, 644.0], [45.7, 644.0], [45.8, 644.0], [45.9, 644.0], [46.0, 644.0], [46.1, 644.0], [46.2, 644.0], [46.3, 644.0], [46.4, 644.0], [46.5, 644.0], [46.6, 644.0], [46.7, 644.0], [46.8, 644.0], [46.9, 644.0], [47.0, 644.0], [47.1, 644.0], [47.2, 644.0], [47.3, 644.0], [47.4, 644.0], [47.5, 644.0], [47.6, 644.0], [47.7, 644.0], [47.8, 644.0], [47.9, 644.0], [48.0, 644.0], [48.1, 644.0], [48.2, 644.0], [48.3, 644.0], [48.4, 644.0], [48.5, 644.0], [48.6, 644.0], [48.7, 644.0], [48.8, 644.0], [48.9, 644.0], [49.0, 644.0], [49.1, 644.0], [49.2, 644.0], [49.3, 644.0], [49.4, 645.0], [49.5, 645.0], [49.6, 645.0], [49.7, 645.0], [49.8, 645.0], [49.9, 645.0], [50.0, 645.0], [50.1, 645.0], [50.2, 645.0], [50.3, 645.0], [50.4, 645.0], [50.5, 645.0], [50.6, 645.0], [50.7, 645.0], [50.8, 645.0], [50.9, 645.0], [51.0, 645.0], [51.1, 645.0], [51.2, 645.0], [51.3, 645.0], [51.4, 645.0], [51.5, 645.0], [51.6, 645.0], [51.7, 645.0], [51.8, 645.0], [51.9, 645.0], [52.0, 645.0], [52.1, 645.0], [52.2, 645.0], [52.3, 645.0], [52.4, 645.0], [52.5, 645.0], [52.6, 645.0], [52.7, 645.0], [52.8, 645.0], [52.9, 645.0], [53.0, 645.0], [53.1, 645.0], [53.2, 645.0], [53.3, 645.0], [53.4, 645.0], [53.5, 645.0], [53.6, 645.0], [53.7, 645.0], [53.8, 645.0], [53.9, 645.0], [54.0, 645.0], [54.1, 645.0], [54.2, 645.0], [54.3, 645.0], [54.4, 645.0], [54.5, 645.0], [54.6, 646.0], [54.7, 646.0], [54.8, 646.0], [54.9, 646.0], [55.0, 646.0], [55.1, 646.0], [55.2, 646.0], [55.3, 646.0], [55.4, 646.0], [55.5, 646.0], [55.6, 646.0], [55.7, 646.0], [55.8, 646.0], [55.9, 646.0], [56.0, 646.0], [56.1, 646.0], [56.2, 646.0], [56.3, 646.0], [56.4, 646.0], [56.5, 646.0], [56.6, 646.0], [56.7, 646.0], [56.8, 646.0], [56.9, 646.0], [57.0, 646.0], [57.1, 646.0], [57.2, 646.0], [57.3, 646.0], [57.4, 646.0], [57.5, 646.0], [57.6, 646.0], [57.7, 646.0], [57.8, 646.0], [57.9, 646.0], [58.0, 646.0], [58.1, 646.0], [58.2, 646.0], [58.3, 646.0], [58.4, 646.0], [58.5, 646.0], [58.6, 646.0], [58.7, 646.0], [58.8, 647.0], [58.9, 647.0], [59.0, 647.0], [59.1, 647.0], [59.2, 647.0], [59.3, 647.0], [59.4, 647.0], [59.5, 647.0], [59.6, 647.0], [59.7, 647.0], [59.8, 647.0], [59.9, 647.0], [60.0, 647.0], [60.1, 647.0], [60.2, 647.0], [60.3, 647.0], [60.4, 647.0], [60.5, 647.0], [60.6, 647.0], [60.7, 647.0], [60.8, 647.0], [60.9, 647.0], [61.0, 647.0], [61.1, 647.0], [61.2, 647.0], [61.3, 647.0], [61.4, 647.0], [61.5, 647.0], [61.6, 647.0], [61.7, 647.0], [61.8, 647.0], [61.9, 647.0], [62.0, 647.0], [62.1, 647.0], [62.2, 647.0], [62.3, 647.0], [62.4, 647.0], [62.5, 647.0], [62.6, 647.0], [62.7, 647.0], [62.8, 647.0], [62.9, 647.0], [63.0, 647.0], [63.1, 647.0], [63.2, 647.0], [63.3, 648.0], [63.4, 648.0], [63.5, 648.0], [63.6, 648.0], [63.7, 648.0], [63.8, 648.0], [63.9, 648.0], [64.0, 648.0], [64.1, 648.0], [64.2, 648.0], [64.3, 648.0], [64.4, 648.0], [64.5, 648.0], [64.6, 648.0], [64.7, 648.0], [64.8, 648.0], [64.9, 648.0], [65.0, 648.0], [65.1, 648.0], [65.2, 648.0], [65.3, 648.0], [65.4, 648.0], [65.5, 648.0], [65.6, 648.0], [65.7, 648.0], [65.8, 648.0], [65.9, 648.0], [66.0, 648.0], [66.1, 648.0], [66.2, 648.0], [66.3, 648.0], [66.4, 648.0], [66.5, 648.0], [66.6, 648.0], [66.7, 649.0], [66.8, 649.0], [66.9, 649.0], [67.0, 649.0], [67.1, 649.0], [67.2, 649.0], [67.3, 649.0], [67.4, 649.0], [67.5, 649.0], [67.6, 649.0], [67.7, 649.0], [67.8, 649.0], [67.9, 649.0], [68.0, 649.0], [68.1, 649.0], [68.2, 649.0], [68.3, 649.0], [68.4, 649.0], [68.5, 649.0], [68.6, 650.0], [68.7, 650.0], [68.8, 650.0], [68.9, 650.0], [69.0, 650.0], [69.1, 650.0], [69.2, 650.0], [69.3, 650.0], [69.4, 650.0], [69.5, 650.0], [69.6, 650.0], [69.7, 650.0], [69.8, 650.0], [69.9, 650.0], [70.0, 650.0], [70.1, 650.0], [70.2, 650.0], [70.3, 650.0], [70.4, 650.0], [70.5, 650.0], [70.6, 650.0], [70.7, 650.0], [70.8, 650.0], [70.9, 650.0], [71.0, 650.0], [71.1, 651.0], [71.2, 651.0], [71.3, 651.0], [71.4, 651.0], [71.5, 651.0], [71.6, 651.0], [71.7, 651.0], [71.8, 651.0], [71.9, 651.0], [72.0, 651.0], [72.1, 651.0], [72.2, 651.0], [72.3, 651.0], [72.4, 651.0], [72.5, 651.0], [72.6, 651.0], [72.7, 651.0], [72.8, 651.0], [72.9, 651.0], [73.0, 651.0], [73.1, 651.0], [73.2, 651.0], [73.3, 651.0], [73.4, 651.0], [73.5, 652.0], [73.6, 652.0], [73.7, 652.0], [73.8, 652.0], [73.9, 652.0], [74.0, 652.0], [74.1, 652.0], [74.2, 652.0], [74.3, 652.0], [74.4, 652.0], [74.5, 652.0], [74.6, 652.0], [74.7, 652.0], [74.8, 652.0], [74.9, 652.0], [75.0, 652.0], [75.1, 652.0], [75.2, 652.0], [75.3, 652.0], [75.4, 652.0], [75.5, 653.0], [75.6, 653.0], [75.7, 653.0], [75.8, 653.0], [75.9, 653.0], [76.0, 653.0], [76.1, 653.0], [76.2, 653.0], [76.3, 653.0], [76.4, 653.0], [76.5, 653.0], [76.6, 653.0], [76.7, 653.0], [76.8, 653.0], [76.9, 653.0], [77.0, 653.0], [77.1, 653.0], [77.2, 654.0], [77.3, 654.0], [77.4, 654.0], [77.5, 654.0], [77.6, 654.0], [77.7, 654.0], [77.8, 654.0], [77.9, 654.0], [78.0, 654.0], [78.1, 655.0], [78.2, 655.0], [78.3, 655.0], [78.4, 655.0], [78.5, 655.0], [78.6, 655.0], [78.7, 655.0], [78.8, 655.0], [78.9, 655.0], [79.0, 655.0], [79.1, 655.0], [79.2, 655.0], [79.3, 655.0], [79.4, 655.0], [79.5, 656.0], [79.6, 656.0], [79.7, 656.0], [79.8, 656.0], [79.9, 656.0], [80.0, 656.0], [80.1, 656.0], [80.2, 656.0], [80.3, 656.0], [80.4, 657.0], [80.5, 657.0], [80.6, 657.0], [80.7, 657.0], [80.8, 657.0], [80.9, 657.0], [81.0, 657.0], [81.1, 657.0], [81.2, 657.0], [81.3, 657.0], [81.4, 658.0], [81.5, 658.0], [81.6, 658.0], [81.7, 658.0], [81.8, 658.0], [81.9, 658.0], [82.0, 659.0], [82.1, 659.0], [82.2, 659.0], [82.3, 659.0], [82.4, 659.0], [82.5, 659.0], [82.6, 659.0], [82.7, 659.0], [82.8, 659.0], [82.9, 659.0], [83.0, 660.0], [83.1, 660.0], [83.2, 660.0], [83.3, 660.0], [83.4, 660.0], [83.5, 660.0], [83.6, 660.0], [83.7, 661.0], [83.8, 661.0], [83.9, 661.0], [84.0, 661.0], [84.1, 661.0], [84.2, 661.0], [84.3, 662.0], [84.4, 662.0], [84.5, 662.0], [84.6, 662.0], [84.7, 662.0], [84.8, 663.0], [84.9, 663.0], [85.0, 663.0], [85.1, 663.0], [85.2, 663.0], [85.3, 663.0], [85.4, 663.0], [85.5, 664.0], [85.6, 664.0], [85.7, 664.0], [85.8, 664.0], [85.9, 664.0], [86.0, 665.0], [86.1, 665.0], [86.2, 665.0], [86.3, 666.0], [86.4, 666.0], [86.5, 667.0], [86.6, 667.0], [86.7, 667.0], [86.8, 667.0], [86.9, 667.0], [87.0, 667.0], [87.1, 668.0], [87.2, 668.0], [87.3, 669.0], [87.4, 669.0], [87.5, 669.0], [87.6, 670.0], [87.7, 670.0], [87.8, 671.0], [87.9, 671.0], [88.0, 672.0], [88.1, 672.0], [88.2, 672.0], [88.3, 673.0], [88.4, 674.0], [88.5, 674.0], [88.6, 674.0], [88.7, 676.0], [88.8, 678.0], [88.9, 678.0], [89.0, 695.0], [89.1, 695.0], [89.2, 711.0], [89.3, 745.0], [89.4, 758.0], [89.5, 766.0], [89.6, 784.0], [89.7, 796.0], [89.8, 804.0], [89.9, 1063.0], [90.0, 1139.0], [90.1, 1182.0], [90.2, 1374.0], [90.3, 1386.0], [90.4, 1396.0], [90.5, 1406.0], [90.6, 1408.0], [90.7, 1418.0], [90.8, 1428.0], [90.9, 1444.0], [91.0, 1497.0], [91.1, 1726.0], [91.2, 1910.0], [91.3, 2042.0], [91.4, 2356.0], [91.5, 2376.0], [91.6, 2401.0], [91.7, 2564.0], [91.8, 2781.0], [91.9, 3098.0], [92.0, 3466.0], [92.1, 4035.0], [92.2, 4041.0], [92.3, 4170.0], [92.4, 4279.0], [92.5, 4424.0], [92.6, 4464.0], [92.7, 4549.0], [92.8, 4670.0], [92.9, 4743.0], [93.0, 4873.0], [93.1, 4980.0], [93.2, 5188.0], [93.3, 5311.0], [93.4, 5430.0], [93.5, 5456.0], [93.6, 5487.0], [93.7, 5811.0], [93.8, 5906.0], [93.9, 6346.0], [94.0, 6517.0], [94.1, 6713.0], [94.2, 7350.0], [94.3, 7657.0], [94.4, 8238.0], [94.5, 8643.0], [94.6, 9460.0], [94.7, 9614.0], [94.8, 10233.0], [94.9, 10423.0], [95.0, 10755.0], [95.1, 11627.0], [95.2, 12612.0], [95.3, 13450.0], [95.4, 13808.0], [95.5, 15437.0], [95.6, 16942.0], [95.7, 17584.0], [95.8, 18192.0], [95.9, 18994.0], [96.0, 20086.0], [96.1, 20784.0], [96.2, 22075.0], [96.3, 22924.0], [96.4, 25964.0], [96.5, 29957.0], [96.6, 33506.0], [96.7, 35956.0], [96.8, 37270.0], [96.9, 38971.0], [97.0, 41729.0], [97.1, 43318.0], [97.2, 44335.0], [97.3, 45358.0], [97.4, 46976.0], [97.5, 52363.0], [97.6, 53609.0], [97.7, 55180.0], [97.8, 58146.0], [97.9, 58639.0], [98.0, 58640.0], [98.1, 58641.0], [98.2, 58642.0], [98.3, 58643.0], [98.4, 58643.0], [98.5, 58647.0], [98.6, 58648.0], [98.7, 58649.0], [98.8, 58650.0], [98.9, 58651.0], [99.0, 58652.0], [99.1, 58653.0], [99.2, 58655.0], [99.3, 58656.0], [99.4, 58657.0], [99.5, 58658.0], [99.6, 58661.0], [99.7, 58664.0], [99.8, 58666.0], [99.9, 58668.0]], "isOverall": false, "label": "CreateYMR", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 1958.0, "series": [{"data": [[33500.0, 1.0], [35900.0, 1.0], [35300.0, 1.0], [36100.0, 1.0], [38900.0, 1.0], [41300.0, 1.0], [41700.0, 1.0], [43100.0, 1.0], [43300.0, 1.0], [44300.0, 1.0], [44500.0, 1.0], [45300.0, 1.0], [46900.0, 1.0], [46300.0, 1.0], [47100.0, 1.0], [52300.0, 1.0], [55100.0, 2.0], [58100.0, 1.0], [59100.0, 1.0], [600.0, 1958.0], [700.0, 12.0], [800.0, 4.0], [1000.0, 1.0], [1100.0, 4.0], [1200.0, 1.0], [1300.0, 6.0], [1400.0, 13.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 2.0], [2000.0, 1.0], [2200.0, 1.0], [2300.0, 5.0], [2400.0, 1.0], [2500.0, 2.0], [2700.0, 2.0], [3000.0, 3.0], [3100.0, 1.0], [3400.0, 1.0], [3900.0, 1.0], [4000.0, 4.0], [4300.0, 1.0], [4200.0, 3.0], [4100.0, 1.0], [4600.0, 1.0], [4500.0, 3.0], [4400.0, 3.0], [4700.0, 4.0], [4800.0, 1.0], [5100.0, 1.0], [5000.0, 1.0], [4900.0, 2.0], [5300.0, 2.0], [5200.0, 1.0], [5400.0, 6.0], [5700.0, 1.0], [5800.0, 2.0], [5900.0, 1.0], [6000.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [6500.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7300.0, 2.0], [7600.0, 1.0], [7900.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8400.0, 1.0], [8600.0, 1.0], [9200.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [10200.0, 3.0], [9800.0, 1.0], [10700.0, 2.0], [10400.0, 1.0], [11000.0, 1.0], [11600.0, 1.0], [11800.0, 1.0], [12600.0, 2.0], [13800.0, 1.0], [13400.0, 2.0], [14300.0, 1.0], [15000.0, 1.0], [15400.0, 1.0], [15900.0, 1.0], [17400.0, 1.0], [16900.0, 1.0], [17700.0, 1.0], [18100.0, 1.0], [17500.0, 1.0], [18900.0, 2.0], [18600.0, 1.0], [20400.0, 1.0], [20000.0, 2.0], [20700.0, 1.0], [22000.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [22900.0, 1.0], [24500.0, 1.0], [25900.0, 1.0], [27900.0, 1.0], [29600.0, 1.0], [29900.0, 1.0], [31300.0, 1.0], [37400.0, 1.0], [37200.0, 1.0], [39400.0, 1.0], [43600.0, 1.0], [48200.0, 1.0], [53000.0, 1.0], [53600.0, 1.0], [56600.0, 1.0], [58600.0, 47.0]], "isOverall": false, "label": "CreateYMR", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 59100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2064.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 125.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2064.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.083333333333334, "minX": 1.576155668E12, "maxY": 20.0, "series": [{"data": [[1.576155762E12, 20.0], [1.576155975E12, 20.0], [1.576155848E12, 20.0], [1.576155676E12, 20.0], [1.57615568E12, 20.0], [1.576155934E12, 20.0], [1.576155672E12, 20.0], [1.576155926E12, 20.0], [1.576155713E12, 20.0], [1.57615593E12, 20.0], [1.576155758E12, 20.0], [1.576155971E12, 20.0], [1.576155688E12, 20.0], [1.576155942E12, 20.0], [1.576155729E12, 20.0], [1.576155946E12, 20.0], [1.576155987E12, 20.0], [1.57615586E12, 20.0], [1.576155938E12, 20.0], [1.576155725E12, 20.0], [1.576155766E12, 20.0], [1.576155979E12, 20.0], [1.576155852E12, 20.0], [1.576155983E12, 20.0], [1.576155856E12, 20.0], [1.576155811E12, 20.0], [1.576155684E12, 20.0], [1.576155914E12, 20.0], [1.576155701E12, 20.0], [1.576155742E12, 20.0], [1.576155955E12, 20.0], [1.576155906E12, 20.0], [1.576155693E12, 20.0], [1.576155947E12, 20.0], [1.576155738E12, 20.0], [1.576155951E12, 20.0], [1.576155865E12, 20.0], [1.576155963E12, 20.0], [1.576155967E12, 20.0], [1.576155795E12, 20.0], [1.576155668E12, 20.0], [1.576155959E12, 20.0], [1.576155918E12, 20.0], [1.576155847E12, 20.0], [1.57615572E12, 20.0], [1.576155933E12, 20.0], [1.576155675E12, 20.0], [1.576155974E12, 20.0], [1.576155761E12, 20.0], [1.576155679E12, 20.0], [1.576155978E12, 20.0], [1.576155806E12, 20.0], [1.576155671E12, 20.0], [1.57615597E12, 20.0], [1.576155929E12, 20.0], [1.576155687E12, 20.0], [1.576155986E12, 20.0], [1.576155814E12, 20.0], [1.576155859E12, 20.0], [1.576155945E12, 20.0], [1.576155937E12, 20.0], [1.576155855E12, 20.0], [1.576155728E12, 20.0], [1.576155941E12, 20.0], [1.576155683E12, 20.0], [1.576155982E12, 20.0], [1.576155769E12, 20.0], [1.576155954E12, 20.0], [1.5761557E12, 20.0], [1.576155864E12, 20.0], [1.576155692E12, 20.0], [1.576155905E12, 20.0], [1.576155696E12, 20.0], [1.576155909E12, 20.0], [1.57615595E12, 20.0], [1.576155708E12, 20.0], [1.576155925E12, 20.0], [1.576155966E12, 20.0], [1.576155753E12, 20.0], [1.576155704E12, 20.0], [1.576155958E12, 20.0], [1.576155962E12, 20.0], [1.57615579E12, 20.0], [1.576155805E12, 20.0], [1.576155932E12, 20.0], [1.57615585E12, 20.0], [1.576155936E12, 20.0], [1.576155678E12, 20.0], [1.576155977E12, 20.0], [1.576155928E12, 20.0], [1.57615567E12, 20.0], [1.576155969E12, 20.0], [1.576155674E12, 20.0], [1.576155973E12, 20.0], [1.576155801E12, 20.0], [1.576155944E12, 20.0], [1.576155686E12, 20.0], [1.576155985E12, 20.0], [1.576155989E12, 20.0], [1.576155731E12, 20.0], [1.576155682E12, 20.0], [1.576155981E12, 20.0], [1.576155723E12, 20.0], [1.576155854E12, 20.0], [1.57615594E12, 20.0], [1.576155912E12, 20.0], [1.576155867E12, 20.0], [1.576155953E12, 20.0], [1.576155957E12, 20.0], [1.576155699E12, 20.0], [1.576155949E12, 20.0], [1.576155691E12, 20.0], [1.57615599E12, 12.083333333333334], [1.576155695E12, 20.0], [1.576155965E12, 20.0], [1.576155793E12, 20.0], [1.576155711E12, 20.0], [1.576155797E12, 20.0], [1.576155924E12, 20.0], [1.576155703E12, 20.0], [1.576155789E12, 20.0], [1.576155961E12, 20.0], [1.576155677E12, 20.0], [1.576155976E12, 20.0], [1.576155718E12, 20.0], [1.576155931E12, 20.0], [1.576155935E12, 20.0], [1.576155808E12, 20.0], [1.576155763E12, 20.0], [1.576155927E12, 20.0], [1.5761558E12, 20.0], [1.576155673E12, 20.0], [1.576155972E12, 20.0], [1.57615573E12, 20.0], [1.576155943E12, 20.0], [1.576155771E12, 20.0], [1.576155861E12, 20.0], [1.576155689E12, 20.0], [1.576155988E12, 20.0], [1.576155767E12, 20.0], [1.576155681E12, 20.0], [1.57615598E12, 20.0], [1.576155685E12, 20.0], [1.576155984E12, 20.0], [1.576155726E12, 20.0], [1.576155939E12, 20.0], [1.576155698E12, 20.0], [1.576155911E12, 20.0], [1.576155956E12, 20.0], [1.576155948E12, 20.0], [1.576155952E12, 20.0], [1.576155694E12, 20.0], [1.576155907E12, 20.0], [1.576155964E12, 20.0], [1.576155669E12, 20.0], [1.576155968E12, 20.0], [1.576155796E12, 20.0], [1.57615596E12, 20.0], [1.576155702E12, 20.0], [1.576155915E12, 20.0], [1.576155788E12, 20.0], [1.576155919E12, 20.0], [1.576155747E12, 20.0]], "isOverall": false, "label": "CreateYMR", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57615599E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 635.0, "minX": 1.0, "maxY": 2959.260450160772, "series": [{"data": [[8.0, 637.0], [2.0, 638.0], [9.0, 635.0], [10.0, 646.0], [11.0, 638.0], [12.0, 641.0], [3.0, 642.0], [13.0, 644.0], [14.0, 644.0], [15.0, 638.0], [16.0, 645.0], [4.0, 636.0], [1.0, 641.0], [17.0, 638.0], [18.0, 638.0], [19.0, 636.0], [20.0, 2959.260450160772], [5.0, 640.0], [6.0, 645.0], [7.0, 642.0]], "isOverall": false, "label": "CreateYMR", "isController": false}, {"data": [[19.91347905282331, 2939.195810564663]], "isOverall": false, "label": "CreateYMR-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 390.0, "minX": 1.576155668E12, "maxY": 2757487.0, "series": [{"data": [[1.576155762E12, 1789284.0], [1.576155975E12, 10140.0], [1.576155848E12, 1170.0], [1.576155676E12, 235895.0], [1.57615568E12, 550268.0], [1.576155934E12, 9750.0], [1.576155672E12, 277909.0], [1.576155926E12, 11310.0], [1.576155713E12, 915546.0], [1.57615593E12, 9750.0], [1.576155758E12, 1796865.0], [1.576155971E12, 10530.0], [1.576155688E12, 332565.0], [1.576155942E12, 13650.0], [1.576155729E12, 467810.0], [1.576155946E12, 14040.0], [1.576155987E12, 12480.0], [1.57615586E12, 780.0], [1.576155938E12, 12480.0], [1.576155725E12, 911767.0], [1.576155766E12, 1836205.0], [1.576155979E12, 12870.0], [1.576155852E12, 390.0], [1.576155983E12, 13260.0], [1.576155856E12, 1880382.0], [1.576155811E12, 390.0], [1.576155684E12, 929996.0], [1.576155914E12, 1823222.0], [1.576155701E12, 466396.0], [1.576155742E12, 1795476.0], [1.576155955E12, 13260.0], [1.576155906E12, 780.0], [1.576155693E12, 463380.0], [1.576155947E12, 9360.0], [1.576155738E12, 1843278.0], [1.576155951E12, 10920.0], [1.576155865E12, 390.0], [1.576155963E12, 12480.0], [1.576155967E12, 14040.0], [1.576155795E12, 1754509.0], [1.576155668E12, 85169.0], [1.576155959E12, 14040.0], [1.576155918E12, 1392486.0], [1.576155847E12, 780.0], [1.57615572E12, 921703.0], [1.576155933E12, 13650.0], [1.576155675E12, 85848.0], [1.576155974E12, 14430.0], [1.576155761E12, 1170.0], [1.576155679E12, 210671.0], [1.576155978E12, 13260.0], [1.576155806E12, 696786.0], [1.576155671E12, 10220.0], [1.57615597E12, 12870.0], [1.576155929E12, 13650.0], [1.576155687E12, 336942.0], [1.576155986E12, 11700.0], [1.576155814E12, 1796858.0], [1.576155859E12, 390.0], [1.576155945E12, 9750.0], [1.576155937E12, 12870.0], [1.576155855E12, 390.0], [1.576155728E12, 944498.0], [1.576155941E12, 9750.0], [1.576155683E12, 224103.0], [1.576155982E12, 10140.0], [1.576155769E12, 390.0], [1.576155954E12, 10920.0], [1.5761557E12, 459156.0], [1.576155864E12, 1170.0], [1.576155692E12, 473349.0], [1.576155905E12, 390.0], [1.576155696E12, 462728.0], [1.576155909E12, 390.0], [1.57615595E12, 13650.0], [1.576155708E12, 925843.0], [1.576155925E12, 1950.0], [1.576155966E12, 9750.0], [1.576155753E12, 1880006.0], [1.576155704E12, 226816.0], [1.576155958E12, 9750.0], [1.576155962E12, 10920.0], [1.57615579E12, 390.0], [1.576155805E12, 471901.0], [1.576155932E12, 9750.0], [1.57615585E12, 1796858.0], [1.576155936E12, 10530.0], [1.576155678E12, 317949.0], [1.576155977E12, 11310.0], [1.576155928E12, 11700.0], [1.57615567E12, 10571.0], [1.576155969E12, 11310.0], [1.576155674E12, 235280.0], [1.576155973E12, 9750.0], [1.576155801E12, 1836595.0], [1.576155944E12, 13650.0], [1.576155686E12, 451467.0], [1.576155985E12, 13650.0], [1.576155989E12, 10920.0], [1.576155731E12, 457955.0], [1.576155682E12, 458036.0], [1.576155981E12, 13260.0], [1.576155723E12, 964386.0], [1.576155854E12, 390.0], [1.57615594E12, 13650.0], [1.576155912E12, 390.0], [1.576155867E12, 1822456.0], [1.576155953E12, 13260.0], [1.576155957E12, 13650.0], [1.576155699E12, 1410920.0], [1.576155949E12, 9750.0], [1.576155691E12, 690822.0], [1.57615599E12, 9360.0], [1.576155695E12, 482737.0], [1.576155965E12, 14430.0], [1.576155793E12, 1772713.0], [1.576155711E12, 910412.0], [1.576155797E12, 390.0], [1.576155924E12, 7800.0], [1.576155703E12, 456180.0], [1.576155789E12, 1170.0], [1.576155961E12, 14040.0], [1.576155677E12, 317059.0], [1.576155976E12, 13260.0], [1.576155718E12, 2757487.0], [1.576155931E12, 13650.0], [1.576155935E12, 14040.0], [1.576155808E12, 2726897.0], [1.576155763E12, 390.0], [1.576155927E12, 12090.0], [1.5761558E12, 465862.0], [1.576155673E12, 319483.0], [1.576155972E12, 13650.0], [1.57615573E12, 1398003.0], [1.576155943E12, 9750.0], [1.576155771E12, 1772727.0], [1.576155861E12, 1788880.0], [1.576155689E12, 335834.0], [1.576155988E12, 12870.0], [1.576155767E12, 390.0], [1.576155681E12, 191061.0], [1.57615598E12, 10530.0], [1.576155685E12, 461344.0], [1.576155984E12, 10920.0], [1.576155726E12, 922776.0], [1.576155939E12, 12480.0], [1.576155698E12, 463181.0], [1.576155911E12, 390.0], [1.576155956E12, 10140.0], [1.576155948E12, 14040.0], [1.576155952E12, 13260.0], [1.576155694E12, 458243.0], [1.576155907E12, 780.0], [1.576155964E12, 8580.0], [1.576155669E12, 31333.0], [1.576155968E12, 12870.0], [1.576155796E12, 1797961.0], [1.57615596E12, 9360.0], [1.576155702E12, 682144.0], [1.576155915E12, 390.0], [1.576155788E12, 390.0], [1.576155919E12, 2707926.0], [1.576155747E12, 1768226.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.576155762E12, 40569.0], [1.576155975E12, 527426.0], [1.576155848E12, 60860.0], [1.576155676E12, 81138.0], [1.57615568E12, 81153.0], [1.576155934E12, 507138.0], [1.576155672E12, 223154.0], [1.576155926E12, 588308.0], [1.576155713E12, 20285.0], [1.57615593E12, 507161.0], [1.576155758E12, 20283.0], [1.576155971E12, 547719.0], [1.576155688E12, 40581.0], [1.576155942E12, 709984.0], [1.576155729E12, 20287.0], [1.576155946E12, 730247.0], [1.576155987E12, 649184.0], [1.57615586E12, 40573.0], [1.576155938E12, 649169.0], [1.576155725E12, 20289.0], [1.576155766E12, 20290.0], [1.576155979E12, 669453.0], [1.576155852E12, 20288.0], [1.576155983E12, 689736.0], [1.576155856E12, 40562.0], [1.576155811E12, 20291.0], [1.576155684E12, 60860.0], [1.576155914E12, 60870.0], [1.576155701E12, 20286.0], [1.576155742E12, 20287.0], [1.576155955E12, 689713.0], [1.576155906E12, 40573.0], [1.576155693E12, 20290.0], [1.576155947E12, 486896.0], [1.576155738E12, 20290.0], [1.576155951E12, 567996.0], [1.576155865E12, 20285.0], [1.576155963E12, 649167.0], [1.576155967E12, 730287.0], [1.576155795E12, 20282.0], [1.576155668E12, 101435.0], [1.576155959E12, 730300.0], [1.576155918E12, 81140.0], [1.576155847E12, 40576.0], [1.57615572E12, 20289.0], [1.576155933E12, 710001.0], [1.576155675E12, 40566.0], [1.576155974E12, 750567.0], [1.576155761E12, 60856.0], [1.576155679E12, 40568.0], [1.576155978E12, 689739.0], [1.576155806E12, 60860.0], [1.576155671E12, 20286.0], [1.57615597E12, 669466.0], [1.576155929E12, 710021.0], [1.576155687E12, 40575.0], [1.576155986E12, 608577.0], [1.576155814E12, 20287.0], [1.576155859E12, 20289.0], [1.576155945E12, 507159.0], [1.576155937E12, 669407.0], [1.576155855E12, 20287.0], [1.576155728E12, 20284.0], [1.576155941E12, 507135.0], [1.576155683E12, 20289.0], [1.576155982E12, 527409.0], [1.576155769E12, 20286.0], [1.576155954E12, 567999.0], [1.5761557E12, 20286.0], [1.576155864E12, 60858.0], [1.576155692E12, 20288.0], [1.576155905E12, 20282.0], [1.576155696E12, 20285.0], [1.576155909E12, 20288.0], [1.57615595E12, 709996.0], [1.576155708E12, 20287.0], [1.576155925E12, 101423.0], [1.576155966E12, 507135.0], [1.576155753E12, 20285.0], [1.576155704E12, 20286.0], [1.576155958E12, 507171.0], [1.576155962E12, 568005.0], [1.57615579E12, 20286.0], [1.576155805E12, 20283.0], [1.576155932E12, 507130.0], [1.57615585E12, 20281.0], [1.576155936E12, 547727.0], [1.576155678E12, 60866.0], [1.576155977E12, 588311.0], [1.576155928E12, 608590.0], [1.57615567E12, 20289.0], [1.576155969E12, 588301.0], [1.576155674E12, 81144.0], [1.576155973E12, 507140.0], [1.576155801E12, 40574.0], [1.576155944E12, 710000.0], [1.576155686E12, 40574.0], [1.576155985E12, 710008.0], [1.576155989E12, 567995.0], [1.576155731E12, 40574.0], [1.576155682E12, 40577.0], [1.576155981E12, 689756.0], [1.576155723E12, 20292.0], [1.576155854E12, 20287.0], [1.57615594E12, 710040.0], [1.576155912E12, 20285.0], [1.576155867E12, 20283.0], [1.576155953E12, 689734.0], [1.576155957E12, 709991.0], [1.576155699E12, 40565.0], [1.576155949E12, 507152.0], [1.576155691E12, 40570.0], [1.57615599E12, 486874.0], [1.576155695E12, 20290.0], [1.576155965E12, 750580.0], [1.576155793E12, 20283.0], [1.576155711E12, 20288.0], [1.576155797E12, 20281.0], [1.576155924E12, 405727.0], [1.576155703E12, 40572.0], [1.576155789E12, 60866.0], [1.576155961E12, 730292.0], [1.576155677E12, 60851.0], [1.576155976E12, 689711.0], [1.576155718E12, 40566.0], [1.576155931E12, 710017.0], [1.576155935E12, 730287.0], [1.576155808E12, 40568.0], [1.576155763E12, 20291.0], [1.576155927E12, 628882.0], [1.5761558E12, 20290.0], [1.576155673E12, 182583.0], [1.576155972E12, 710004.0], [1.57615573E12, 40567.0], [1.576155943E12, 507134.0], [1.576155771E12, 20280.0], [1.576155861E12, 20290.0], [1.576155689E12, 40575.0], [1.576155988E12, 669434.0], [1.576155767E12, 20280.0], [1.576155681E12, 60857.0], [1.57615598E12, 547718.0], [1.576155685E12, 40574.0], [1.576155984E12, 568018.0], [1.576155726E12, 20286.0], [1.576155939E12, 649160.0], [1.576155698E12, 20289.0], [1.576155911E12, 20285.0], [1.576155956E12, 527459.0], [1.576155948E12, 730312.0], [1.576155952E12, 689716.0], [1.576155694E12, 20287.0], [1.576155907E12, 40570.0], [1.576155964E12, 446302.0], [1.576155669E12, 60855.0], [1.576155968E12, 669451.0], [1.576155796E12, 20289.0], [1.57615596E12, 486878.0], [1.576155702E12, 60856.0], [1.576155915E12, 20286.0], [1.576155788E12, 20287.0], [1.576155919E12, 81133.0], [1.576155747E12, 20286.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57615599E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 639.1666666666667, "minX": 1.576155668E12, "maxY": 59122.0, "series": [{"data": [[1.576155762E12, 51168.5], [1.576155975E12, 639.6153846153846], [1.576155848E12, 58648.0], [1.576155676E12, 4063.5], [1.57615568E12, 6560.25], [1.576155934E12, 645.2000000000002], [1.576155672E12, 4589.000000000001], [1.576155926E12, 1147.344827586207], [1.576155713E12, 13450.0], [1.57615593E12, 642.7200000000001], [1.576155758E12, 37480.0], [1.576155971E12, 646.1481481481479], [1.576155688E12, 11277.5], [1.576155942E12, 645.142857142857], [1.576155729E12, 38971.0], [1.576155946E12, 648.8055555555555], [1.576155987E12, 641.75], [1.57615586E12, 58658.0], [1.576155938E12, 647.3750000000001], [1.576155725E12, 31357.0], [1.576155766E12, 48299.0], [1.576155979E12, 642.6666666666666], [1.576155852E12, 58657.0], [1.576155983E12, 640.3823529411762], [1.576155856E12, 51589.5], [1.576155811E12, 58656.0], [1.576155684E12, 5176.666666666667], [1.576155914E12, 54801.333333333336], [1.576155701E12, 18995.0], [1.576155742E12, 15931.0], [1.576155955E12, 646.8529411764707], [1.576155906E12, 58647.5], [1.576155693E12, 6643.0], [1.576155947E12, 664.0833333333334], [1.576155738E12, 10263.0], [1.576155951E12, 644.6785714285713], [1.576155865E12, 58658.0], [1.576155963E12, 704.9062500000002], [1.576155967E12, 644.1666666666667], [1.576155795E12, 25964.0], [1.576155668E12, 1246.4], [1.576155959E12, 645.8611111111111], [1.576155918E12, 55980.25], [1.576155847E12, 58660.0], [1.57615572E12, 24589.0], [1.576155933E12, 647.1999999999998], [1.576155675E12, 2221.5], [1.576155974E12, 640.6756756756756], [1.576155761E12, 58646.333333333336], [1.576155679E12, 4805.0], [1.576155978E12, 644.529411764706], [1.576155806E12, 49450.333333333336], [1.576155671E12, 4035.0], [1.57615597E12, 642.3939393939395], [1.576155929E12, 640.6000000000003], [1.576155687E12, 10318.0], [1.576155986E12, 640.2000000000002], [1.576155814E12, 56639.0], [1.576155859E12, 58657.0], [1.576155945E12, 640.6], [1.576155937E12, 658.7575757575756], [1.576155855E12, 58646.0], [1.576155728E12, 35956.0], [1.576155941E12, 643.36], [1.576155683E12, 3165.0], [1.576155982E12, 659.3076923076924], [1.576155769E12, 58667.0], [1.576155954E12, 645.6428571428573], [1.5761557E12, 17430.0], [1.576155864E12, 58652.333333333336], [1.576155692E12, 5311.0], [1.576155905E12, 58656.0], [1.576155696E12, 10719.0], [1.576155909E12, 58661.0], [1.57615595E12, 647.2285714285714], [1.576155708E12, 6927.0], [1.576155925E12, 1388.6], [1.576155966E12, 641.4000000000001], [1.576155753E12, 29957.0], [1.576155704E12, 2734.0], [1.576155958E12, 643.5999999999999], [1.576155962E12, 644.2142857142856], [1.57615579E12, 58640.0], [1.576155805E12, 43318.0], [1.576155932E12, 641.2799999999999], [1.57615585E12, 36145.0], [1.576155936E12, 647.1481481481482], [1.576155678E12, 3428.0], [1.576155977E12, 642.4827586206897], [1.576155928E12, 642.0333333333334], [1.57615567E12, 3098.0], [1.576155969E12, 643.5862068965517], [1.576155674E12, 1632.5], [1.576155973E12, 641.4800000000001], [1.576155801E12, 47010.5], [1.576155944E12, 645.8000000000001], [1.576155686E12, 8375.0], [1.576155985E12, 641.4857142857144], [1.576155989E12, 642.4285714285716], [1.576155731E12, 42448.5], [1.576155682E12, 5726.0], [1.576155981E12, 640.0882352941175], [1.576155723E12, 27928.0], [1.576155854E12, 58642.0], [1.57615594E12, 643.5142857142858], [1.576155912E12, 58638.0], [1.576155867E12, 59122.0], [1.576155953E12, 646.7352941176471], [1.576155957E12, 648.0571428571428], [1.576155699E12, 14910.5], [1.576155949E12, 650.56], [1.576155691E12, 3046.5], [1.57615599E12, 639.1666666666667], [1.576155695E12, 9460.0], [1.576155965E12, 649.8648648648648], [1.576155793E12, 22448.0], [1.576155711E12, 10269.0], [1.576155797E12, 58655.0], [1.576155924E12, 10691.550000000001], [1.576155703E12, 22499.5], [1.576155789E12, 58647.333333333336], [1.576155961E12, 643.3888888888889], [1.576155677E12, 4844.333333333333], [1.576155976E12, 641.5294117647056], [1.576155718E12, 19508.0], [1.576155931E12, 642.6571428571428], [1.576155935E12, 653.7777777777777], [1.576155808E12, 46684.0], [1.576155763E12, 58641.0], [1.576155927E12, 702.4193548387098], [1.5761558E12, 37270.0], [1.576155673E12, 4746.666666666667], [1.576155972E12, 642.8], [1.57615573E12, 40429.0], [1.576155943E12, 658.0000000000001], [1.576155771E12, 58146.0], [1.576155861E12, 52363.0], [1.576155689E12, 12634.0], [1.576155988E12, 640.7575757575758], [1.576155767E12, 58655.0], [1.576155681E12, 8124.333333333333], [1.57615598E12, 643.5555555555555], [1.576155685E12, 6911.5], [1.576155984E12, 642.4285714285716], [1.576155726E12, 33506.0], [1.576155939E12, 641.375], [1.576155698E12, 13808.0], [1.576155911E12, 58666.0], [1.576155956E12, 645.576923076923], [1.576155948E12, 656.5277777777779], [1.576155952E12, 644.9411764705884], [1.576155694E12, 7915.0], [1.576155907E12, 58657.5], [1.576155964E12, 723.7727272727274], [1.576155669E12, 1774.0], [1.576155968E12, 644.878787878788], [1.576155796E12, 29634.0], [1.57615596E12, 648.2083333333333], [1.576155702E12, 20431.666666666668], [1.576155915E12, 58647.0], [1.576155788E12, 58649.0], [1.576155919E12, 56898.75], [1.576155747E12, 21862.0]], "isOverall": false, "label": "CreateYMR", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57615599E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 639.1666666666667, "minX": 1.576155668E12, "maxY": 58667.0, "series": [{"data": [[1.576155762E12, 49392.0], [1.576155975E12, 639.6153846153846], [1.576155848E12, 58648.0], [1.576155676E12, 3903.75], [1.57615568E12, 6237.5], [1.576155934E12, 645.2000000000002], [1.576155672E12, 4531.727272727273], [1.576155926E12, 1147.310344827586], [1.576155713E12, 11388.0], [1.57615593E12, 642.7200000000001], [1.576155758E12, 33973.0], [1.576155971E12, 646.1481481481479], [1.576155688E12, 10890.5], [1.576155942E12, 645.1142857142855], [1.576155729E12, 37941.0], [1.576155946E12, 648.8055555555555], [1.576155987E12, 641.71875], [1.57615586E12, 58658.0], [1.576155938E12, 647.3750000000001], [1.576155725E12, 29320.0], [1.576155766E12, 45577.0], [1.576155979E12, 642.6060606060606], [1.576155852E12, 58657.0], [1.576155983E12, 640.3823529411762], [1.576155856E12, 50248.5], [1.576155811E12, 58656.0], [1.576155684E12, 4450.666666666667], [1.576155914E12, 53905.333333333336], [1.576155701E12, 17940.0], [1.576155742E12, 12634.0], [1.576155955E12, 646.8529411764707], [1.576155906E12, 58647.5], [1.576155693E12, 5492.0], [1.576155947E12, 664.0416666666665], [1.576155738E12, 6690.0], [1.576155951E12, 644.6785714285713], [1.576155865E12, 58658.0], [1.576155963E12, 704.9062500000002], [1.576155967E12, 644.1666666666667], [1.576155795E12, 23415.0], [1.576155668E12, 1221.8], [1.576155959E12, 645.8611111111111], [1.576155918E12, 55370.5], [1.576155847E12, 58659.5], [1.57615572E12, 22539.0], [1.576155933E12, 647.1999999999998], [1.576155675E12, 2095.5], [1.576155974E12, 640.6486486486485], [1.576155761E12, 58646.333333333336], [1.576155679E12, 4543.5], [1.576155978E12, 644.529411764706], [1.576155806E12, 48938.333333333336], [1.576155671E12, 4035.0], [1.57615597E12, 642.3939393939395], [1.576155929E12, 640.6000000000003], [1.576155687E12, 9934.5], [1.576155986E12, 640.2000000000002], [1.576155814E12, 53609.0], [1.576155859E12, 58657.0], [1.576155945E12, 640.6], [1.576155937E12, 658.7575757575756], [1.576155855E12, 58646.0], [1.576155728E12, 33885.0], [1.576155941E12, 643.36], [1.576155683E12, 2653.0], [1.576155982E12, 659.3076923076924], [1.576155769E12, 58667.0], [1.576155954E12, 645.6428571428573], [1.5761557E12, 16299.0], [1.576155864E12, 58652.333333333336], [1.576155692E12, 4180.0], [1.576155905E12, 58656.0], [1.576155696E12, 9687.0], [1.576155909E12, 58661.0], [1.57615595E12, 647.1999999999999], [1.576155708E12, 4880.0], [1.576155925E12, 1388.6], [1.576155966E12, 641.4000000000001], [1.576155753E12, 26437.0], [1.576155704E12, 2218.0], [1.576155958E12, 643.5999999999999], [1.576155962E12, 644.2142857142856], [1.57615579E12, 58640.0], [1.576155805E12, 42288.0], [1.576155932E12, 641.2799999999999], [1.57615585E12, 33475.0], [1.576155936E12, 647.1481481481482], [1.576155678E12, 3169.3333333333335], [1.576155977E12, 642.4827586206897], [1.576155928E12, 641.9999999999999], [1.57615567E12, 3098.0], [1.576155969E12, 643.5862068965517], [1.576155674E12, 1475.25], [1.576155973E12, 641.44], [1.576155801E12, 45724.5], [1.576155944E12, 645.8000000000001], [1.576155686E12, 7857.0], [1.576155985E12, 641.4571428571428], [1.576155989E12, 642.4285714285716], [1.576155731E12, 41925.0], [1.576155682E12, 5209.5], [1.576155981E12, 640.0588235294116], [1.576155723E12, 25791.0], [1.576155854E12, 58642.0], [1.57615594E12, 643.5142857142858], [1.576155912E12, 58638.0], [1.576155867E12, 56204.0], [1.576155953E12, 646.7352941176471], [1.576155957E12, 648.0285714285716], [1.576155699E12, 13316.0], [1.576155949E12, 650.56], [1.576155691E12, 2218.5], [1.57615599E12, 639.1666666666667], [1.576155695E12, 8305.0], [1.576155965E12, 649.8108108108108], [1.576155793E12, 19605.0], [1.576155711E12, 8215.0], [1.576155797E12, 58655.0], [1.576155924E12, 10691.550000000001], [1.576155703E12, 21983.5], [1.576155789E12, 58647.333333333336], [1.576155961E12, 643.3611111111111], [1.576155677E12, 4589.666666666667], [1.576155976E12, 641.5294117647056], [1.576155718E12, 16900.0], [1.576155931E12, 642.6571428571428], [1.576155935E12, 653.7777777777777], [1.576155808E12, 43914.5], [1.576155763E12, 58641.0], [1.576155927E12, 702.3548387096774], [1.5761558E12, 36241.0], [1.576155673E12, 4662.333333333333], [1.576155972E12, 642.8], [1.57615573E12, 38880.0], [1.576155943E12, 657.88], [1.576155771E12, 54807.0], [1.576155861E12, 49693.0], [1.576155689E12, 12244.0], [1.576155988E12, 640.7575757575758], [1.576155767E12, 58655.0], [1.576155681E12, 7954.666666666667], [1.57615598E12, 643.5555555555555], [1.576155685E12, 6340.5], [1.576155984E12, 642.4285714285716], [1.576155726E12, 31495.0], [1.576155939E12, 641.375], [1.576155698E12, 12731.0], [1.576155911E12, 58666.0], [1.576155956E12, 645.576923076923], [1.576155948E12, 656.5277777777779], [1.576155952E12, 644.9411764705884], [1.576155694E12, 6777.0], [1.576155907E12, 58657.5], [1.576155964E12, 723.7727272727274], [1.576155669E12, 1774.0], [1.576155968E12, 644.878787878788], [1.576155796E12, 27191.0], [1.57615596E12, 648.2083333333333], [1.576155702E12, 19873.333333333332], [1.576155915E12, 58647.0], [1.576155788E12, 58649.0], [1.576155919E12, 55848.25], [1.576155747E12, 18524.0]], "isOverall": false, "label": "CreateYMR", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57615599E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 381.0, "minX": 1.576155668E12, "maxY": 1126.6, "series": [{"data": [[1.576155762E12, 397.5], [1.576155975E12, 384.2307692307692], [1.576155848E12, 392.3333333333333], [1.576155676E12, 388.5], [1.57615568E12, 396.75], [1.576155934E12, 387.6], [1.576155672E12, 388.27272727272725], [1.576155926E12, 746.5517241379308], [1.576155713E12, 384.0], [1.57615593E12, 386.55999999999995], [1.576155758E12, 392.0], [1.576155971E12, 388.962962962963], [1.576155688E12, 385.0], [1.576155942E12, 387.88571428571436], [1.576155729E12, 387.0], [1.576155946E12, 391.3888888888889], [1.576155987E12, 385.68750000000006], [1.57615586E12, 397.0], [1.576155938E12, 390.1562499999999], [1.576155725E12, 393.0], [1.576155766E12, 397.0], [1.576155979E12, 385.99999999999994], [1.576155852E12, 387.0], [1.576155983E12, 385.23529411764696], [1.576155856E12, 390.0], [1.576155811E12, 396.0], [1.576155684E12, 397.3333333333333], [1.576155914E12, 391.3333333333333], [1.576155701E12, 384.0], [1.576155742E12, 401.0], [1.576155955E12, 389.26470588235287], [1.576155906E12, 391.5], [1.576155693E12, 396.0], [1.576155947E12, 397.04166666666663], [1.576155738E12, 388.0], [1.576155951E12, 386.4285714285714], [1.576155865E12, 402.0], [1.576155963E12, 409.87500000000006], [1.576155967E12, 386.50000000000006], [1.576155795E12, 383.0], [1.576155668E12, 383.0], [1.576155959E12, 387.91666666666674], [1.576155918E12, 387.5], [1.576155847E12, 391.5], [1.57615572E12, 396.0], [1.576155933E12, 389.8285714285714], [1.576155675E12, 391.5], [1.576155974E12, 384.5405405405406], [1.576155761E12, 385.6666666666667], [1.576155679E12, 391.0], [1.576155978E12, 388.0294117647059], [1.576155806E12, 399.0], [1.576155671E12, 387.0], [1.57615597E12, 384.78787878787887], [1.576155929E12, 385.14285714285705], [1.576155687E12, 382.5], [1.576155986E12, 384.19999999999993], [1.576155814E12, 399.0], [1.576155859E12, 398.0], [1.576155945E12, 384.76], [1.576155937E12, 393.57575757575756], [1.576155855E12, 392.0], [1.576155728E12, 402.0], [1.576155941E12, 387.31999999999994], [1.576155683E12, 422.0], [1.576155982E12, 386.4615384615385], [1.576155769E12, 408.0], [1.576155954E12, 387.4999999999999], [1.5761557E12, 385.0], [1.576155864E12, 390.0], [1.576155692E12, 400.0], [1.576155905E12, 388.0], [1.576155696E12, 394.0], [1.576155909E12, 400.0], [1.57615595E12, 388.0571428571428], [1.576155708E12, 388.0], [1.576155925E12, 1126.6], [1.576155966E12, 385.44], [1.576155753E12, 395.0], [1.576155704E12, 409.0], [1.576155958E12, 386.08], [1.576155962E12, 387.42857142857144], [1.57615579E12, 383.0], [1.576155805E12, 387.0], [1.576155932E12, 385.48], [1.57615585E12, 398.0], [1.576155936E12, 390.18518518518516], [1.576155678E12, 393.6666666666667], [1.576155977E12, 385.8620689655173], [1.576155928E12, 386.59999999999997], [1.57615567E12, 386.0], [1.576155969E12, 387.24137931034477], [1.576155674E12, 387.75], [1.576155973E12, 385.5200000000001], [1.576155801E12, 398.0], [1.576155944E12, 389.1142857142857], [1.576155686E12, 389.5], [1.576155985E12, 385.20000000000005], [1.576155989E12, 387.07142857142856], [1.576155731E12, 390.0], [1.576155682E12, 396.0], [1.576155981E12, 384.7941176470588], [1.576155723E12, 395.0], [1.576155854E12, 387.0], [1.57615594E12, 386.80000000000007], [1.576155912E12, 382.0], [1.576155867E12, 387.0], [1.576155953E12, 387.08823529411757], [1.576155957E12, 390.4857142857143], [1.576155699E12, 396.0], [1.576155949E12, 391.59999999999997], [1.576155691E12, 387.5], [1.57615599E12, 383.875], [1.576155695E12, 394.0], [1.576155965E12, 392.0270270270271], [1.576155793E12, 397.0], [1.576155711E12, 393.0], [1.576155797E12, 390.0], [1.576155924E12, 392.54999999999995], [1.576155703E12, 389.5], [1.576155789E12, 390.3333333333333], [1.576155961E12, 386.8055555555556], [1.576155677E12, 387.0], [1.576155976E12, 384.88235294117646], [1.576155718E12, 391.0], [1.576155931E12, 385.42857142857144], [1.576155935E12, 394.02777777777777], [1.576155808E12, 392.5], [1.576155763E12, 381.0], [1.576155927E12, 411.90322580645164], [1.5761558E12, 406.0], [1.576155673E12, 385.1111111111111], [1.576155972E12, 385.9428571428571], [1.57615573E12, 385.5], [1.576155943E12, 394.88], [1.576155771E12, 400.0], [1.576155861E12, 389.0], [1.576155689E12, 385.5], [1.576155988E12, 385.4242424242424], [1.576155767E12, 394.0], [1.576155681E12, 395.6666666666667], [1.57615598E12, 387.4444444444444], [1.576155685E12, 388.5], [1.576155984E12, 386.82142857142856], [1.576155726E12, 383.0], [1.576155939E12, 384.96875000000006], [1.576155698E12, 393.0], [1.576155911E12, 402.0], [1.576155956E12, 387.2307692307692], [1.576155948E12, 396.02777777777777], [1.576155952E12, 386.47058823529414], [1.576155694E12, 398.0], [1.576155907E12, 398.0], [1.576155964E12, 464.6363636363637], [1.576155669E12, 390.0], [1.576155968E12, 387.7272727272728], [1.576155796E12, 407.0], [1.57615596E12, 391.12499999999994], [1.576155702E12, 391.6666666666667], [1.576155915E12, 386.0], [1.576155788E12, 386.0], [1.576155919E12, 389.25], [1.576155747E12, 395.0]], "isOverall": false, "label": "CreateYMR", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57615599E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1138.0, "minX": 1.576155668E12, "maxY": 59122.0, "series": [{"data": [[1.576155762E12, 43685.0], [1.576155805E12, 43318.0], [1.576155676E12, 4170.0], [1.57615585E12, 36145.0], [1.57615568E12, 7367.0], [1.576155678E12, 4037.0], [1.576155672E12, 5443.0], [1.57615567E12, 3098.0], [1.576155713E12, 13450.0], [1.576155674E12, 1894.0], [1.576155758E12, 37480.0], [1.576155801E12, 35356.0], [1.576155688E12, 11800.0], [1.576155686E12, 8643.0], [1.576155729E12, 38971.0], [1.576155731E12, 43168.0], [1.576155682E12, 9219.0], [1.576155725E12, 31357.0], [1.576155723E12, 27928.0], [1.576155766E12, 48299.0], [1.576155856E12, 44534.0], [1.576155684E12, 5811.0], [1.576155867E12, 59122.0], [1.576155914E12, 47102.0], [1.576155701E12, 18995.0], [1.576155699E12, 15437.0], [1.576155742E12, 15931.0], [1.576155693E12, 6643.0], [1.576155691E12, 3092.0], [1.576155695E12, 9460.0], [1.576155738E12, 10263.0], [1.576155793E12, 22448.0], [1.576155711E12, 10269.0], [1.576155795E12, 25964.0], [1.576155668E12, 1604.0], [1.576155703E12, 22924.0], [1.576155918E12, 53609.0], [1.576155677E12, 5236.0], [1.57615572E12, 24589.0], [1.576155675E12, 2401.0], [1.576155718E12, 20022.0], [1.576155679E12, 5083.0], [1.576155808E12, 46976.0], [1.576155806E12, 45358.0], [1.576155671E12, 4035.0], [1.5761558E12, 37270.0], [1.576155673E12, 5720.0], [1.576155687E12, 11022.0], [1.57615573E12, 41395.0], [1.576155771E12, 58146.0], [1.576155814E12, 56639.0], [1.576155861E12, 52363.0], [1.576155689E12, 12656.0], [1.576155681E12, 8478.0], [1.576155685E12, 7350.0], [1.576155728E12, 35956.0], [1.576155683E12, 3165.0], [1.576155726E12, 33506.0], [1.576155698E12, 13808.0], [1.5761557E12, 17430.0], [1.576155692E12, 5311.0], [1.576155696E12, 10719.0], [1.576155694E12, 7915.0], [1.576155708E12, 6927.0], [1.576155669E12, 1915.0], [1.576155753E12, 29957.0], [1.576155796E12, 29634.0], [1.576155704E12, 2734.0], [1.576155702E12, 20784.0], [1.576155919E12, 55180.0], [1.576155747E12, 21862.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.576155762E12, 43685.0], [1.576155805E12, 43318.0], [1.576155676E12, 3996.0], [1.57615585E12, 36145.0], [1.57615568E12, 5889.0], [1.576155678E12, 2781.0], [1.576155672E12, 2515.0], [1.57615567E12, 3098.0], [1.576155713E12, 13450.0], [1.576155674E12, 1418.0], [1.576155758E12, 37480.0], [1.576155801E12, 35356.0], [1.576155688E12, 10755.0], [1.576155686E12, 8107.0], [1.576155729E12, 38971.0], [1.576155731E12, 41729.0], [1.576155682E12, 2233.0], [1.576155725E12, 31357.0], [1.576155723E12, 27928.0], [1.576155766E12, 48299.0], [1.576155856E12, 44534.0], [1.576155684E12, 4739.0], [1.576155867E12, 59122.0], [1.576155914E12, 47102.0], [1.576155701E12, 18995.0], [1.576155699E12, 14384.0], [1.576155742E12, 15931.0], [1.576155693E12, 6643.0], [1.576155691E12, 3001.0], [1.576155695E12, 9460.0], [1.576155738E12, 10263.0], [1.576155793E12, 22448.0], [1.576155711E12, 10269.0], [1.576155795E12, 25964.0], [1.576155668E12, 1138.0], [1.576155703E12, 22075.0], [1.576155918E12, 53030.0], [1.576155677E12, 4424.0], [1.57615572E12, 24589.0], [1.576155675E12, 2042.0], [1.576155718E12, 18994.0], [1.576155679E12, 4527.0], [1.576155808E12, 46392.0], [1.576155806E12, 44335.0], [1.576155671E12, 4035.0], [1.5761558E12, 37270.0], [1.576155673E12, 2564.0], [1.576155687E12, 9614.0], [1.57615573E12, 39463.0], [1.576155771E12, 58146.0], [1.576155814E12, 56639.0], [1.576155861E12, 52363.0], [1.576155689E12, 12612.0], [1.576155681E12, 7657.0], [1.576155685E12, 6473.0], [1.576155728E12, 35956.0], [1.576155683E12, 3165.0], [1.576155726E12, 33506.0], [1.576155698E12, 13808.0], [1.5761557E12, 17430.0], [1.576155692E12, 5311.0], [1.576155696E12, 10719.0], [1.576155694E12, 7915.0], [1.576155708E12, 6927.0], [1.576155669E12, 1497.0], [1.576155753E12, 29957.0], [1.576155796E12, 29634.0], [1.576155704E12, 2734.0], [1.576155702E12, 20086.0], [1.576155919E12, 55118.0], [1.576155747E12, 21862.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.576155762E12, 29754.100000000013], [1.576155805E12, 36087.40000000001], [1.576155676E12, 5454.7], [1.57615585E12, 40429.0], [1.57615568E12, 5650.1], [1.576155678E12, 5446.9], [1.576155672E12, 5417.0], [1.57615567E12, 3098.0], [1.576155713E12, 14211.2], [1.576155674E12, 5462.5], [1.576155758E12, 27928.0], [1.576155801E12, 35476.0], [1.576155688E12, 8478.0], [1.576155686E12, 7483.0], [1.576155729E12, 20391.100000000002], [1.576155731E12, 23756.5], [1.576155682E12, 6843.800000000002], [1.576155725E12, 19200.4], [1.576155723E12, 18994.3], [1.576155766E12, 31076.999999999996], [1.576155856E12, 41528.6], [1.576155684E12, 6624.800000000002], [1.576155867E12, 43198.0], [1.576155914E12, 43354.700000000004], [1.576155701E12, 11488.800000000007], [1.576155699E12, 10747.8], [1.576155742E12, 23423.499999999996], [1.576155693E12, 8873.400000000003], [1.576155691E12, 8988.600000000006], [1.576155695E12, 9267.2], [1.576155738E12, 23590.00000000001], [1.576155793E12, 32646.40000000002], [1.576155711E12, 14268.8], [1.576155795E12, 32431.5], [1.576155668E12, 1604.0], [1.576155703E12, 14489.300000000008], [1.576155918E12, 44270.0], [1.576155677E12, 5450.8], [1.57615572E12, 18055.60000000001], [1.576155675E12, 5459.9], [1.576155718E12, 16433.5], [1.576155679E12, 5444.3], [1.576155808E12, 39315.4], [1.576155806E12, 37459.0], [1.576155671E12, 3941.3], [1.5761558E12, 34240.99999999999], [1.576155673E12, 5467.7], [1.576155687E12, 8133.200000000001], [1.57615573E12, 21687.700000000004], [1.576155771E12, 32861.3], [1.576155814E12, 40622.20000000002], [1.576155861E12, 42160.7], [1.576155689E12, 9103.8], [1.576155681E12, 6448.4], [1.576155685E12, 7095.200000000001], [1.576155728E12, 20086.0], [1.576155683E12, 6778.400000000001], [1.576155726E12, 20028.4], [1.576155698E12, 9614.0], [1.5761557E12, 10941.900000000001], [1.576155692E12, 8931.0], [1.576155696E12, 9475.400000000001], [1.576155694E12, 8815.8], [1.576155708E12, 14326.400000000003], [1.576155669E12, 1915.0], [1.576155753E12, 24922.900000000027], [1.576155796E12, 32216.600000000013], [1.576155704E12, 14384.0], [1.576155702E12, 13001.599999999997], [1.576155919E12, 45110.8], [1.576155747E12, 23257.000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.576155762E12, 43628.13], [1.576155805E12, 56275.07000000002], [1.576155676E12, 5720.0], [1.57615585E12, 57769.25], [1.57615568E12, 7367.0], [1.576155678E12, 5720.0], [1.576155672E12, 5443.0], [1.57615567E12, 3098.0], [1.576155713E12, 22924.0], [1.576155674E12, 5720.0], [1.576155758E12, 43024.100000000006], [1.576155801E12, 56373.539999999935], [1.576155688E12, 11800.0], [1.576155686E12, 9219.0], [1.576155729E12, 38940.849999999984], [1.576155731E12, 43096.05], [1.576155682E12, 9219.0], [1.576155725E12, 31357.0], [1.576155723E12, 27928.0], [1.576155766E12, 47745.31999999998], [1.576155856E12, 57754.17999999999], [1.576155684E12, 9219.0], [1.576155867E12, 58848.72], [1.576155914E12, 58838.95999999999], [1.576155701E12, 18995.0], [1.576155699E12, 15437.0], [1.576155742E12, 43067.26999999999], [1.576155693E12, 12656.0], [1.576155691E12, 12656.0], [1.576155695E12, 12656.0], [1.576155738E12, 43081.659999999996], [1.576155793E12, 56767.42], [1.576155711E12, 22924.0], [1.576155795E12, 56668.949999999946], [1.576155668E12, 1604.0], [1.576155703E12, 22924.0], [1.576155918E12, 58819.439999999995], [1.576155677E12, 5720.0], [1.57615572E12, 24589.0], [1.576155675E12, 5720.0], [1.576155718E12, 22924.0], [1.576155679E12, 5720.0], [1.576155808E12, 55881.18999999996], [1.576155806E12, 56078.129999999925], [1.576155671E12, 4035.0], [1.5761558E12, 56472.00999999998], [1.576155673E12, 5720.0], [1.576155687E12, 11022.0], [1.57615573E12, 41337.04], [1.576155771E12, 56865.89000000004], [1.576155814E12, 57784.32000000001], [1.576155861E12, 57739.11000000001], [1.576155689E12, 12656.0], [1.576155681E12, 8478.0], [1.576155685E12, 9219.0], [1.576155728E12, 35956.0], [1.576155683E12, 9219.0], [1.576155726E12, 33506.0], [1.576155698E12, 13808.0], [1.5761557E12, 17430.0], [1.576155692E12, 12656.0], [1.576155696E12, 12656.0], [1.576155694E12, 12656.0], [1.576155708E12, 22924.0], [1.576155669E12, 1915.0], [1.576155753E12, 43038.49], [1.576155796E12, 56570.48000000003], [1.576155704E12, 22924.0], [1.576155702E12, 20784.0], [1.576155919E12, 58799.91999999999], [1.576155747E12, 43052.880000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.576155762E12, 39192.399999999994], [1.576155805E12, 41800.95], [1.576155676E12, 5486.1], [1.57615585E12, 45102.25], [1.57615568E12, 6426.349999999998], [1.576155678E12, 5480.7], [1.576155672E12, 5441.7], [1.57615567E12, 3098.0], [1.576155713E12, 20204.649999999998], [1.576155674E12, 5545.25], [1.576155758E12, 38225.5], [1.576155801E12, 41428.4], [1.576155688E12, 10184.5], [1.576155686E12, 8405.999999999998], [1.576155729E12, 27761.049999999963], [1.576155731E12, 38217.25], [1.576155682E12, 8261.999999999998], [1.576155725E12, 22159.899999999994], [1.576155723E12, 20977.64999999999], [1.576155766E12, 40235.79999999998], [1.576155856E12, 45110.79999999999], [1.576155684E12, 8179.9], [1.576155867E12, 46742.399999999994], [1.576155914E12, 47045.3], [1.576155701E12, 14268.8], [1.576155699E12, 12651.6], [1.576155742E12, 37915.74999999997], [1.576155693E12, 11177.600000000002], [1.576155691E12, 11255.399999999998], [1.576155695E12, 11099.799999999996], [1.576155738E12, 38066.49999999996], [1.576155793E12, 41495.2], [1.576155711E12, 20221.6], [1.576155795E12, 41478.5], [1.576155668E12, 1604.0], [1.576155703E12, 20272.45], [1.576155918E12, 50127.79999999995], [1.576155677E12, 5483.4], [1.57615572E12, 20496.799999999996], [1.576155675E12, 5521.95], [1.576155718E12, 20170.75], [1.576155679E12, 5478.9], [1.576155808E12, 44237.5], [1.576155806E12, 43310.5], [1.576155671E12, 4035.0], [1.5761558E12, 41445.1], [1.576155673E12, 5591.849999999999], [1.576155687E12, 8988.599999999997], [1.57615573E12, 33183.64999999999], [1.576155771E12, 41511.9], [1.576155814E12, 45153.399999999994], [1.576155861E12, 46030.09999999999], [1.576155689E12, 11333.199999999993], [1.576155681E12, 7773.199999999997], [1.576155685E12, 8121.799999999998], [1.576155728E12, 24589.0], [1.576155683E12, 8250.0], [1.576155726E12, 23007.249999999996], [1.576155698E12, 11800.0], [1.5761557E12, 13635.199999999993], [1.576155692E12, 11216.5], [1.576155696E12, 11060.899999999998], [1.576155694E12, 11138.699999999993], [1.576155708E12, 20238.55], [1.576155669E12, 1915.0], [1.576155753E12, 37614.24999999999], [1.576155796E12, 41461.799999999996], [1.576155704E12, 20255.5], [1.576155702E12, 18447.249999999985], [1.576155919E12, 53232.649999999994], [1.576155747E12, 37764.999999999985]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.576155919E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 644.0, "minX": 1000.0, "maxY": 10328.0, "series": [{"data": [[1000.0, 8011.0], [2000.0, 4822.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6000.0, 5165.0], [3000.0, 648.0], [1000.0, 644.0], [2000.0, 650.0], [4000.0, 10328.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 6000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 644.0, "minX": 1000.0, "maxY": 10328.0, "series": [{"data": [[1000.0, 7252.5], [2000.0, 4758.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6000.0, 5165.0], [3000.0, 648.0], [1000.0, 644.0], [2000.0, 650.0], [4000.0, 10328.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 6000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576155667E12, "maxY": 37.0, "series": [{"data": [[1.576155762E12, 2.0], [1.576155975E12, 26.0], [1.576155848E12, 2.0], [1.576155676E12, 4.0], [1.57615568E12, 4.0], [1.576155934E12, 25.0], [1.576155672E12, 11.0], [1.576155926E12, 29.0], [1.576155713E12, 1.0], [1.57615593E12, 25.0], [1.576155758E12, 1.0], [1.576155971E12, 27.0], [1.576155688E12, 2.0], [1.576155942E12, 35.0], [1.576155729E12, 1.0], [1.576155946E12, 36.0], [1.576155987E12, 33.0], [1.57615586E12, 2.0], [1.576155938E12, 32.0], [1.576155725E12, 1.0], [1.576155766E12, 1.0], [1.576155979E12, 33.0], [1.576155852E12, 1.0], [1.576155983E12, 34.0], [1.576155856E12, 2.0], [1.576155811E12, 1.0], [1.576155684E12, 3.0], [1.576155914E12, 3.0], [1.576155701E12, 1.0], [1.576155742E12, 1.0], [1.576155955E12, 34.0], [1.576155906E12, 2.0], [1.576155693E12, 1.0], [1.576155947E12, 24.0], [1.576155738E12, 1.0], [1.576155951E12, 28.0], [1.576155865E12, 1.0], [1.576155963E12, 32.0], [1.576155967E12, 35.0], [1.576155795E12, 1.0], [1.576155668E12, 5.0], [1.576155959E12, 36.0], [1.576155918E12, 4.0], [1.576155847E12, 2.0], [1.57615572E12, 1.0], [1.576155933E12, 35.0], [1.576155675E12, 2.0], [1.576155974E12, 37.0], [1.576155761E12, 3.0], [1.576155679E12, 2.0], [1.576155978E12, 34.0], [1.576155806E12, 3.0], [1.576155671E12, 1.0], [1.57615597E12, 33.0], [1.576155929E12, 35.0], [1.576155687E12, 2.0], [1.576155986E12, 29.0], [1.576155814E12, 1.0], [1.576155859E12, 1.0], [1.576155945E12, 25.0], [1.576155937E12, 34.0], [1.576155855E12, 1.0], [1.576155728E12, 1.0], [1.576155941E12, 25.0], [1.576155683E12, 1.0], [1.576155982E12, 26.0], [1.576155769E12, 1.0], [1.576155954E12, 28.0], [1.5761557E12, 1.0], [1.576155864E12, 3.0], [1.576155692E12, 1.0], [1.576155905E12, 1.0], [1.576155696E12, 1.0], [1.576155909E12, 1.0], [1.57615595E12, 36.0], [1.576155708E12, 1.0], [1.576155925E12, 4.0], [1.576155667E12, 20.0], [1.576155966E12, 25.0], [1.576155753E12, 1.0], [1.576155704E12, 1.0], [1.576155958E12, 25.0], [1.576155962E12, 28.0], [1.57615579E12, 1.0], [1.576155805E12, 1.0], [1.576155932E12, 25.0], [1.57615585E12, 1.0], [1.576155936E12, 26.0], [1.576155678E12, 3.0], [1.576155977E12, 29.0], [1.576155928E12, 30.0], [1.57615567E12, 1.0], [1.576155969E12, 29.0], [1.576155674E12, 4.0], [1.576155973E12, 25.0], [1.576155801E12, 2.0], [1.576155944E12, 35.0], [1.576155686E12, 2.0], [1.576155985E12, 35.0], [1.576155989E12, 28.0], [1.576155731E12, 2.0], [1.576155682E12, 2.0], [1.576155981E12, 34.0], [1.576155723E12, 1.0], [1.576155854E12, 1.0], [1.57615594E12, 35.0], [1.576155912E12, 1.0], [1.576155867E12, 1.0], [1.576155953E12, 34.0], [1.576155957E12, 35.0], [1.576155699E12, 2.0], [1.576155949E12, 24.0], [1.576155691E12, 2.0], [1.57615599E12, 4.0], [1.576155695E12, 1.0], [1.576155965E12, 37.0], [1.576155793E12, 1.0], [1.576155711E12, 1.0], [1.576155797E12, 1.0], [1.576155924E12, 20.0], [1.576155703E12, 2.0], [1.576155789E12, 3.0], [1.576155961E12, 36.0], [1.576155677E12, 3.0], [1.576155976E12, 34.0], [1.576155718E12, 2.0], [1.576155931E12, 35.0], [1.576155935E12, 36.0], [1.576155808E12, 2.0], [1.576155763E12, 1.0], [1.576155849E12, 1.0], [1.576155927E12, 32.0], [1.5761558E12, 1.0], [1.576155673E12, 9.0], [1.576155972E12, 35.0], [1.57615573E12, 2.0], [1.576155943E12, 25.0], [1.576155771E12, 1.0], [1.576155861E12, 1.0], [1.576155689E12, 2.0], [1.576155988E12, 33.0], [1.576155767E12, 1.0], [1.576155681E12, 3.0], [1.57615598E12, 27.0], [1.576155685E12, 2.0], [1.576155984E12, 28.0], [1.576155726E12, 1.0], [1.576155939E12, 32.0], [1.576155698E12, 1.0], [1.576155911E12, 1.0], [1.576155956E12, 26.0], [1.576155948E12, 36.0], [1.576155952E12, 34.0], [1.576155694E12, 1.0], [1.576155907E12, 2.0], [1.576155964E12, 22.0], [1.576155669E12, 3.0], [1.576155968E12, 34.0], [1.576155796E12, 1.0], [1.57615596E12, 24.0], [1.576155702E12, 3.0], [1.576155915E12, 1.0], [1.576155788E12, 1.0], [1.576155919E12, 4.0], [1.576155747E12, 1.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57615599E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576155668E12, "maxY": 37.0, "series": [{"data": [[1.576155762E12, 1.0], [1.576155805E12, 1.0], [1.576155676E12, 4.0], [1.57615585E12, 1.0], [1.57615568E12, 4.0], [1.576155678E12, 3.0], [1.576155672E12, 11.0], [1.57615567E12, 1.0], [1.576155713E12, 1.0], [1.576155674E12, 4.0], [1.576155758E12, 1.0], [1.576155801E12, 1.0], [1.576155688E12, 2.0], [1.576155686E12, 2.0], [1.576155729E12, 1.0], [1.576155731E12, 2.0], [1.576155682E12, 2.0], [1.576155725E12, 1.0], [1.576155723E12, 1.0], [1.576155766E12, 1.0], [1.576155856E12, 1.0], [1.576155684E12, 3.0], [1.576155867E12, 1.0], [1.576155914E12, 1.0], [1.576155701E12, 1.0], [1.576155699E12, 2.0], [1.576155742E12, 1.0], [1.576155693E12, 1.0], [1.576155691E12, 2.0], [1.576155695E12, 1.0], [1.576155738E12, 1.0], [1.576155793E12, 1.0], [1.576155711E12, 1.0], [1.576155795E12, 1.0], [1.576155668E12, 5.0], [1.576155703E12, 2.0], [1.576155918E12, 2.0], [1.576155677E12, 3.0], [1.57615572E12, 1.0], [1.576155675E12, 2.0], [1.576155718E12, 2.0], [1.576155679E12, 2.0], [1.576155808E12, 2.0], [1.576155806E12, 2.0], [1.576155671E12, 1.0], [1.5761558E12, 1.0], [1.576155673E12, 9.0], [1.576155687E12, 2.0], [1.57615573E12, 2.0], [1.576155771E12, 1.0], [1.576155814E12, 1.0], [1.576155861E12, 1.0], [1.576155689E12, 2.0], [1.576155681E12, 3.0], [1.576155685E12, 2.0], [1.576155728E12, 1.0], [1.576155683E12, 1.0], [1.576155726E12, 1.0], [1.576155698E12, 1.0], [1.5761557E12, 1.0], [1.576155692E12, 1.0], [1.576155696E12, 1.0], [1.576155694E12, 1.0], [1.576155708E12, 1.0], [1.576155669E12, 3.0], [1.576155753E12, 1.0], [1.576155796E12, 1.0], [1.576155704E12, 1.0], [1.576155702E12, 3.0], [1.576155919E12, 2.0], [1.576155747E12, 1.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.576155762E12, 1.0], [1.576155975E12, 26.0], [1.576155848E12, 3.0], [1.576155934E12, 25.0], [1.576155926E12, 29.0], [1.57615593E12, 25.0], [1.576155971E12, 27.0], [1.576155942E12, 35.0], [1.576155946E12, 36.0], [1.576155987E12, 32.0], [1.57615586E12, 2.0], [1.576155938E12, 32.0], [1.576155979E12, 33.0], [1.576155852E12, 1.0], [1.576155983E12, 34.0], [1.576155856E12, 1.0], [1.576155811E12, 1.0], [1.576155914E12, 2.0], [1.576155955E12, 34.0], [1.576155906E12, 2.0], [1.576155947E12, 24.0], [1.576155951E12, 28.0], [1.576155865E12, 1.0], [1.576155963E12, 32.0], [1.576155967E12, 36.0], [1.576155959E12, 36.0], [1.576155918E12, 2.0], [1.576155847E12, 2.0], [1.576155933E12, 35.0], [1.576155974E12, 37.0], [1.576155761E12, 3.0], [1.576155978E12, 34.0], [1.576155806E12, 1.0], [1.57615597E12, 33.0], [1.576155929E12, 35.0], [1.576155986E12, 30.0], [1.576155859E12, 1.0], [1.576155945E12, 25.0], [1.576155937E12, 33.0], [1.576155855E12, 1.0], [1.576155941E12, 25.0], [1.576155982E12, 26.0], [1.576155769E12, 1.0], [1.576155954E12, 28.0], [1.576155864E12, 3.0], [1.576155905E12, 1.0], [1.576155909E12, 1.0], [1.57615595E12, 35.0], [1.576155925E12, 5.0], [1.576155966E12, 25.0], [1.576155958E12, 25.0], [1.576155962E12, 28.0], [1.57615579E12, 1.0], [1.576155932E12, 25.0], [1.576155936E12, 27.0], [1.576155977E12, 29.0], [1.576155928E12, 30.0], [1.576155969E12, 29.0], [1.576155973E12, 25.0], [1.576155801E12, 1.0], [1.576155944E12, 35.0], [1.576155985E12, 35.0], [1.576155989E12, 28.0], [1.576155981E12, 34.0], [1.576155854E12, 1.0], [1.57615594E12, 35.0], [1.576155912E12, 1.0], [1.576155953E12, 34.0], [1.576155957E12, 35.0], [1.576155949E12, 25.0], [1.57615599E12, 24.0], [1.576155965E12, 37.0], [1.576155797E12, 1.0], [1.576155924E12, 20.0], [1.576155789E12, 3.0], [1.576155961E12, 36.0], [1.576155976E12, 34.0], [1.576155931E12, 35.0], [1.576155935E12, 36.0], [1.576155763E12, 1.0], [1.576155927E12, 31.0], [1.576155972E12, 35.0], [1.576155943E12, 25.0], [1.576155988E12, 33.0], [1.576155767E12, 1.0], [1.57615598E12, 27.0], [1.576155984E12, 28.0], [1.576155939E12, 32.0], [1.576155911E12, 1.0], [1.576155956E12, 26.0], [1.576155948E12, 36.0], [1.576155952E12, 34.0], [1.576155907E12, 2.0], [1.576155964E12, 22.0], [1.576155968E12, 33.0], [1.57615596E12, 24.0], [1.576155915E12, 1.0], [1.576155788E12, 1.0], [1.576155919E12, 2.0]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57615599E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576155668E12, "maxY": 37.0, "series": [{"data": [[1.576155762E12, 1.0], [1.576155805E12, 1.0], [1.576155676E12, 4.0], [1.57615585E12, 1.0], [1.57615568E12, 4.0], [1.576155678E12, 3.0], [1.576155672E12, 11.0], [1.57615567E12, 1.0], [1.576155713E12, 1.0], [1.576155674E12, 4.0], [1.576155758E12, 1.0], [1.576155801E12, 1.0], [1.576155688E12, 2.0], [1.576155686E12, 2.0], [1.576155729E12, 1.0], [1.576155731E12, 2.0], [1.576155682E12, 2.0], [1.576155725E12, 1.0], [1.576155723E12, 1.0], [1.576155766E12, 1.0], [1.576155856E12, 1.0], [1.576155684E12, 3.0], [1.576155867E12, 1.0], [1.576155914E12, 1.0], [1.576155701E12, 1.0], [1.576155699E12, 2.0], [1.576155742E12, 1.0], [1.576155693E12, 1.0], [1.576155691E12, 2.0], [1.576155695E12, 1.0], [1.576155738E12, 1.0], [1.576155793E12, 1.0], [1.576155711E12, 1.0], [1.576155795E12, 1.0], [1.576155668E12, 5.0], [1.576155703E12, 2.0], [1.576155918E12, 2.0], [1.576155677E12, 3.0], [1.57615572E12, 1.0], [1.576155675E12, 2.0], [1.576155718E12, 2.0], [1.576155679E12, 2.0], [1.576155808E12, 2.0], [1.576155806E12, 2.0], [1.576155671E12, 1.0], [1.5761558E12, 1.0], [1.576155673E12, 9.0], [1.576155687E12, 2.0], [1.57615573E12, 2.0], [1.576155771E12, 1.0], [1.576155814E12, 1.0], [1.576155861E12, 1.0], [1.576155689E12, 2.0], [1.576155681E12, 3.0], [1.576155685E12, 2.0], [1.576155728E12, 1.0], [1.576155683E12, 1.0], [1.576155726E12, 1.0], [1.576155698E12, 1.0], [1.5761557E12, 1.0], [1.576155692E12, 1.0], [1.576155696E12, 1.0], [1.576155694E12, 1.0], [1.576155708E12, 1.0], [1.576155669E12, 3.0], [1.576155753E12, 1.0], [1.576155796E12, 1.0], [1.576155704E12, 1.0], [1.576155702E12, 3.0], [1.576155919E12, 2.0], [1.576155747E12, 1.0]], "isOverall": false, "label": "CreateYMR-success", "isController": false}, {"data": [[1.576155762E12, 1.0], [1.576155975E12, 26.0], [1.576155848E12, 3.0], [1.576155934E12, 25.0], [1.576155926E12, 29.0], [1.57615593E12, 25.0], [1.576155971E12, 27.0], [1.576155942E12, 35.0], [1.576155946E12, 36.0], [1.576155987E12, 32.0], [1.57615586E12, 2.0], [1.576155938E12, 32.0], [1.576155979E12, 33.0], [1.576155852E12, 1.0], [1.576155983E12, 34.0], [1.576155856E12, 1.0], [1.576155811E12, 1.0], [1.576155914E12, 2.0], [1.576155955E12, 34.0], [1.576155906E12, 2.0], [1.576155947E12, 24.0], [1.576155951E12, 28.0], [1.576155865E12, 1.0], [1.576155963E12, 32.0], [1.576155967E12, 36.0], [1.576155959E12, 36.0], [1.576155918E12, 2.0], [1.576155847E12, 2.0], [1.576155933E12, 35.0], [1.576155974E12, 37.0], [1.576155761E12, 3.0], [1.576155978E12, 34.0], [1.576155806E12, 1.0], [1.57615597E12, 33.0], [1.576155929E12, 35.0], [1.576155986E12, 30.0], [1.576155859E12, 1.0], [1.576155945E12, 25.0], [1.576155937E12, 33.0], [1.576155855E12, 1.0], [1.576155941E12, 25.0], [1.576155982E12, 26.0], [1.576155769E12, 1.0], [1.576155954E12, 28.0], [1.576155864E12, 3.0], [1.576155905E12, 1.0], [1.576155909E12, 1.0], [1.57615595E12, 35.0], [1.576155925E12, 5.0], [1.576155966E12, 25.0], [1.576155958E12, 25.0], [1.576155962E12, 28.0], [1.57615579E12, 1.0], [1.576155932E12, 25.0], [1.576155936E12, 27.0], [1.576155977E12, 29.0], [1.576155928E12, 30.0], [1.576155969E12, 29.0], [1.576155973E12, 25.0], [1.576155801E12, 1.0], [1.576155944E12, 35.0], [1.576155985E12, 35.0], [1.576155989E12, 28.0], [1.576155981E12, 34.0], [1.576155854E12, 1.0], [1.57615594E12, 35.0], [1.576155912E12, 1.0], [1.576155953E12, 34.0], [1.576155957E12, 35.0], [1.576155949E12, 25.0], [1.57615599E12, 24.0], [1.576155965E12, 37.0], [1.576155797E12, 1.0], [1.576155924E12, 20.0], [1.576155789E12, 3.0], [1.576155961E12, 36.0], [1.576155976E12, 34.0], [1.576155931E12, 35.0], [1.576155935E12, 36.0], [1.576155763E12, 1.0], [1.576155927E12, 31.0], [1.576155972E12, 35.0], [1.576155943E12, 25.0], [1.576155988E12, 33.0], [1.576155767E12, 1.0], [1.57615598E12, 27.0], [1.576155984E12, 28.0], [1.576155939E12, 32.0], [1.576155911E12, 1.0], [1.576155956E12, 26.0], [1.576155948E12, 36.0], [1.576155952E12, 34.0], [1.576155907E12, 2.0], [1.576155964E12, 22.0], [1.576155968E12, 33.0], [1.57615596E12, 24.0], [1.576155915E12, 1.0], [1.576155788E12, 1.0], [1.576155919E12, 2.0]], "isOverall": false, "label": "CreateYMR-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57615599E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576155668E12, "maxY": 37.0, "series": [{"data": [[1.576155762E12, 1.0], [1.576155805E12, 1.0], [1.576155676E12, 4.0], [1.57615585E12, 1.0], [1.57615568E12, 4.0], [1.576155678E12, 3.0], [1.576155672E12, 11.0], [1.57615567E12, 1.0], [1.576155713E12, 1.0], [1.576155674E12, 4.0], [1.576155758E12, 1.0], [1.576155801E12, 1.0], [1.576155688E12, 2.0], [1.576155686E12, 2.0], [1.576155729E12, 1.0], [1.576155731E12, 2.0], [1.576155682E12, 2.0], [1.576155725E12, 1.0], [1.576155723E12, 1.0], [1.576155766E12, 1.0], [1.576155856E12, 1.0], [1.576155684E12, 3.0], [1.576155867E12, 1.0], [1.576155914E12, 1.0], [1.576155701E12, 1.0], [1.576155699E12, 2.0], [1.576155742E12, 1.0], [1.576155693E12, 1.0], [1.576155691E12, 2.0], [1.576155695E12, 1.0], [1.576155738E12, 1.0], [1.576155793E12, 1.0], [1.576155711E12, 1.0], [1.576155795E12, 1.0], [1.576155668E12, 5.0], [1.576155703E12, 2.0], [1.576155918E12, 2.0], [1.576155677E12, 3.0], [1.57615572E12, 1.0], [1.576155675E12, 2.0], [1.576155718E12, 2.0], [1.576155679E12, 2.0], [1.576155808E12, 2.0], [1.576155806E12, 2.0], [1.576155671E12, 1.0], [1.5761558E12, 1.0], [1.576155673E12, 9.0], [1.576155687E12, 2.0], [1.57615573E12, 2.0], [1.576155771E12, 1.0], [1.576155814E12, 1.0], [1.576155861E12, 1.0], [1.576155689E12, 2.0], [1.576155681E12, 3.0], [1.576155685E12, 2.0], [1.576155728E12, 1.0], [1.576155683E12, 1.0], [1.576155726E12, 1.0], [1.576155698E12, 1.0], [1.5761557E12, 1.0], [1.576155692E12, 1.0], [1.576155696E12, 1.0], [1.576155694E12, 1.0], [1.576155708E12, 1.0], [1.576155669E12, 3.0], [1.576155753E12, 1.0], [1.576155796E12, 1.0], [1.576155704E12, 1.0], [1.576155702E12, 3.0], [1.576155919E12, 2.0], [1.576155747E12, 1.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.576155762E12, 1.0], [1.576155975E12, 26.0], [1.576155848E12, 3.0], [1.576155934E12, 25.0], [1.576155926E12, 29.0], [1.57615593E12, 25.0], [1.576155971E12, 27.0], [1.576155942E12, 35.0], [1.576155946E12, 36.0], [1.576155987E12, 32.0], [1.57615586E12, 2.0], [1.576155938E12, 32.0], [1.576155979E12, 33.0], [1.576155852E12, 1.0], [1.576155983E12, 34.0], [1.576155856E12, 1.0], [1.576155811E12, 1.0], [1.576155914E12, 2.0], [1.576155955E12, 34.0], [1.576155906E12, 2.0], [1.576155947E12, 24.0], [1.576155951E12, 28.0], [1.576155865E12, 1.0], [1.576155963E12, 32.0], [1.576155967E12, 36.0], [1.576155959E12, 36.0], [1.576155918E12, 2.0], [1.576155847E12, 2.0], [1.576155933E12, 35.0], [1.576155974E12, 37.0], [1.576155761E12, 3.0], [1.576155978E12, 34.0], [1.576155806E12, 1.0], [1.57615597E12, 33.0], [1.576155929E12, 35.0], [1.576155986E12, 30.0], [1.576155859E12, 1.0], [1.576155945E12, 25.0], [1.576155937E12, 33.0], [1.576155855E12, 1.0], [1.576155941E12, 25.0], [1.576155982E12, 26.0], [1.576155769E12, 1.0], [1.576155954E12, 28.0], [1.576155864E12, 3.0], [1.576155905E12, 1.0], [1.576155909E12, 1.0], [1.57615595E12, 35.0], [1.576155925E12, 5.0], [1.576155966E12, 25.0], [1.576155958E12, 25.0], [1.576155962E12, 28.0], [1.57615579E12, 1.0], [1.576155932E12, 25.0], [1.576155936E12, 27.0], [1.576155977E12, 29.0], [1.576155928E12, 30.0], [1.576155969E12, 29.0], [1.576155973E12, 25.0], [1.576155801E12, 1.0], [1.576155944E12, 35.0], [1.576155985E12, 35.0], [1.576155989E12, 28.0], [1.576155981E12, 34.0], [1.576155854E12, 1.0], [1.57615594E12, 35.0], [1.576155912E12, 1.0], [1.576155953E12, 34.0], [1.576155957E12, 35.0], [1.576155949E12, 25.0], [1.57615599E12, 24.0], [1.576155965E12, 37.0], [1.576155797E12, 1.0], [1.576155924E12, 20.0], [1.576155789E12, 3.0], [1.576155961E12, 36.0], [1.576155976E12, 34.0], [1.576155931E12, 35.0], [1.576155935E12, 36.0], [1.576155763E12, 1.0], [1.576155927E12, 31.0], [1.576155972E12, 35.0], [1.576155943E12, 25.0], [1.576155988E12, 33.0], [1.576155767E12, 1.0], [1.57615598E12, 27.0], [1.576155984E12, 28.0], [1.576155939E12, 32.0], [1.576155911E12, 1.0], [1.576155956E12, 26.0], [1.576155948E12, 36.0], [1.576155952E12, 34.0], [1.576155907E12, 2.0], [1.576155964E12, 22.0], [1.576155968E12, 33.0], [1.57615596E12, 24.0], [1.576155915E12, 1.0], [1.576155788E12, 1.0], [1.576155919E12, 2.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57615599E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

